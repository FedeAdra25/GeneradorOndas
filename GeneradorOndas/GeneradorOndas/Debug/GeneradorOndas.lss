
GeneradorOndas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000112  00800100  00000760  000007f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000760  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000113  00800212  00800212  00000906  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000938  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001230  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000acf  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000968  00000000  00000000  000027ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000038c  00000000  00000000  00003158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b2  00000000  00000000  000034e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006db  00000000  00000000  00003c96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00004371  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 99 01 	jmp	0x332	; 0x332 <__vector_18>
  4c:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 32       	cpi	r26, 0x25	; 37
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 ae 03 	jmp	0x75c	; 0x75c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 */ 


#include "main.h"
int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	c6 50       	subi	r28, 0x06	; 6
  b0:	d1 40       	sbci	r29, 0x01	; 1
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	cd bf       	out	0x3d, r28	; 61
    char welcomeMsj[] = "Bienvenidx al generador de señales digitales programable\r Por favor, ingrese una frecuencia entre 100 y 10000Hz o un comando\r ON: encender generador(frecuencia por defecto: 100Hz), OFF: apagar generador, RST: reiniciar \r\n";
  bc:	8e ed       	ldi	r24, 0xDE	; 222
  be:	e0 e0       	ldi	r30, 0x00	; 0
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	de 01       	movw	r26, r28
  c4:	11 96       	adiw	r26, 0x01	; 1
  c6:	01 90       	ld	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	8a 95       	dec	r24
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x20>
	char errorMsj[] = "Lo siento, no he entendido el comando\r\n";
  ce:	88 e2       	ldi	r24, 0x28	; 40
  d0:	ee ed       	ldi	r30, 0xDE	; 222
  d2:	f1 e0       	ldi	r31, 0x01	; 1
  d4:	de 01       	movw	r26, r28
  d6:	a1 52       	subi	r26, 0x21	; 33
  d8:	bf 4f       	sbci	r27, 0xFF	; 255
  da:	01 90       	ld	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	8a 95       	dec	r24
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x34>
	unsigned char command = 0;
	
	UART_Init(BAUD_RATE,1,1); //inicializo la uart
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	87 e6       	ldi	r24, 0x67	; 103
  e8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <UART_Init>
	SGEN_Init(); //inicializo generadora de señales
  ec:	0e 94 e5 00 	call	0x1ca	; 0x1ca <SGEN_Init>
	sei();
  f0:	78 94       	sei
	
	UART_PrintString(welcomeMsj); //Imprimo mensaje de bienvenida
  f2:	ce 01       	movw	r24, r28
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <UART_PrintString>
#include "main.h"
int main(void)
{
    char welcomeMsj[] = "Bienvenidx al generador de señales digitales programable\r Por favor, ingrese una frecuencia entre 100 y 10000Hz o un comando\r ON: encender generador(frecuencia por defecto: 100Hz), OFF: apagar generador, RST: reiniciar \r\n";
	char errorMsj[] = "Lo siento, no he entendido el comando\r\n";
	unsigned char command = 0;
  fa:	10 e0       	ldi	r17, 0x00	; 0
	
	UART_PrintString(welcomeMsj); //Imprimo mensaje de bienvenida
	
    while (1) 
    {
		if(UART_HayString()){ //flag de la UART de \r
  fc:	0e 94 91 01 	call	0x322	; 0x322 <UART_HayString>
 100:	88 23       	and	r24, r24
 102:	29 f0       	breq	.+10     	; 0x10e <main+0x68>
			command = SGEN_Decode(UART_GetString()); //returns number of error
 104:	0e 94 88 01 	call	0x310	; 0x310 <UART_GetString>
 108:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <SGEN_Decode>
 10c:	18 2f       	mov	r17, r24
		}
		//Comportamiento si dio error o se reinicio
		if(command==SGEN_ERROR){
 10e:	15 34       	cpi	r17, 0x45	; 69
 110:	39 f4       	brne	.+14     	; 0x120 <main+0x7a>
			UART_PrintString(errorMsj);
 112:	ce 01       	movw	r24, r28
 114:	81 52       	subi	r24, 0x21	; 33
 116:	9f 4f       	sbci	r25, 0xFF	; 255
 118:	0e 94 70 01 	call	0x2e0	; 0x2e0 <UART_PrintString>
			//print error msj
			command=0;
 11c:	10 e0       	ldi	r17, 0x00	; 0
 11e:	ee cf       	rjmp	.-36     	; 0xfc <main+0x56>
		}
		else if (command==SGEN_RESET){
 120:	1a 32       	cpi	r17, 0x2A	; 42
 122:	61 f7       	brne	.-40     	; 0xfc <main+0x56>
			UART_PrintString(welcomeMsj);
 124:	ce 01       	movw	r24, r28
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	0e 94 70 01 	call	0x2e0	; 0x2e0 <UART_PrintString>
			command=0;
 12c:	10 e0       	ldi	r17, 0x00	; 0
 12e:	e6 cf       	rjmp	.-52     	; 0xfc <main+0x56>

00000130 <SerialPort_Init>:

// Espera hasta que el buffer de RX este completo.
void SerialPort_Wait_Until_New_Data(void){
	// Pooling - Bloqueante, puede durar indefinidamente!
	while(!(UCSR0A & (1<<RXC0)));
}
 130:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 134:	96 e0       	ldi	r25, 0x06	; 6
 136:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 13a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 13e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 142:	08 95       	ret

00000144 <SerialPort_TX_Enable>:
 144:	e1 ec       	ldi	r30, 0xC1	; 193
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	88 60       	ori	r24, 0x08	; 8
 14c:	80 83       	st	Z, r24
 14e:	08 95       	ret

00000150 <SerialPort_TX_Interrupt_Enable>:
 150:	e1 ec       	ldi	r30, 0xC1	; 193
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	80 62       	ori	r24, 0x20	; 32
 158:	80 83       	st	Z, r24
 15a:	08 95       	ret

0000015c <SerialPort_TX_Interrupt_Disable>:
 15c:	e1 ec       	ldi	r30, 0xC1	; 193
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	8f 7d       	andi	r24, 0xDF	; 223
 164:	80 83       	st	Z, r24
 166:	08 95       	ret

00000168 <SerialPort_RX_Enable>:
 168:	e1 ec       	ldi	r30, 0xC1	; 193
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	80 61       	ori	r24, 0x10	; 16
 170:	80 83       	st	Z, r24
 172:	08 95       	ret

00000174 <SerialPort_RX_Interrupt_Enable>:
 174:	e1 ec       	ldi	r30, 0xC1	; 193
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	80 68       	ori	r24, 0x80	; 128
 17c:	80 83       	st	Z, r24
 17e:	08 95       	ret

00000180 <SerialPort_Send_Data>:
 180:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 184:	08 95       	ret

00000186 <SerialPort_Recive_Data>:


char SerialPort_Recive_Data(void){
	return UDR0;
 186:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 18a:	08 95       	ret

0000018c <SGEN_SetFreq>:
}

//sets the frequency
static void SGEN_SetFreq(uint16_t frequency){
	frq = frequency;
	TIMERCONFIG_SetOCR1A( (BASE_FRQ/frq) + 0.5 ); //seteo el OCR1A fancy
 18c:	9c 01       	movw	r18, r24
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	50 e0       	ldi	r21, 0x00	; 0
 192:	6f e3       	ldi	r22, 0x3F	; 63
 194:	72 e4       	ldi	r23, 0x42	; 66
 196:	8f e0       	ldi	r24, 0x0F	; 15
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 56 03 	call	0x6ac	; 0x6ac <__udivmodsi4>
 19e:	ca 01       	movw	r24, r20
 1a0:	b9 01       	movw	r22, r18
 1a2:	0e 94 c8 02 	call	0x590	; 0x590 <__floatunsisf>
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	5f e3       	ldi	r21, 0x3F	; 63
 1ae:	0e 94 2d 02 	call	0x45a	; 0x45a <__addsf3>
 1b2:	0e 94 99 02 	call	0x532	; 0x532 <__fixunssfsi>
 1b6:	cb 01       	movw	r24, r22
 1b8:	0e 94 41 01 	call	0x282	; 0x282 <TIMERCONFIG_SetOCR1A>
 1bc:	08 95       	ret

000001be <SGEN_TurnOn>:

//turns on generator
static void SGEN_TurnOn(){
	//TO DO
	//UART_PrintString("La maquina se prendio bien culiado");
	TIMERCONFIG_ActivateToggle(); //activo el toggle
 1be:	0e 94 46 01 	call	0x28c	; 0x28c <TIMERCONFIG_ActivateToggle>
 1c2:	08 95       	ret

000001c4 <SGEN_TurnOff>:

//turns off generator
static void SGEN_TurnOff(){
	//TO DO
	//UART_PrintString("La maquina se apago bien culiado");
	TIMERCONFIG_DeactivateToggle();
 1c4:	0e 94 4c 01 	call	0x298	; 0x298 <TIMERCONFIG_DeactivateToggle>
 1c8:	08 95       	ret

000001ca <SGEN_Init>:

void SGEN_Init(){
	//Inicializar signal generator
	
	//Inicializo timer
	TIMERCONFIG_Init(TIMERCONFIG_CTC,TIMERCONFIG_PRESCALER_8); //inicializo timer en modo ctc y con preescalador N=8
 1ca:	68 e0       	ldi	r22, 0x08	; 8
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	0e 94 2a 01 	call	0x254	; 0x254 <TIMERCONFIG_Init>
	SGEN_SetFreq(100); //seteo la frecuencia inicial
 1d2:	84 e6       	ldi	r24, 0x64	; 100
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 c6 00 	call	0x18c	; 0x18c <SGEN_SetFreq>
 1da:	08 95       	ret

000001dc <SGEN_RST>:

//restarts program
static void SGEN_RST(){
	//TO DO
	//UART_PrintString("La maquina se reseteo bien culiados");
	SGEN_Init();
 1dc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <SGEN_Init>
	SGEN_TurnOff();
 1e0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SGEN_TurnOff>
 1e4:	08 95       	ret

000001e6 <SGEN_Decode>:
	SGEN_SetFreq(100); //seteo la frecuencia inicial
	//SGEN_TurnOff();
}


uint8_t SGEN_Decode(char* command){
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	ec 01       	movw	r28, r24
	
	SGEN_Cleanup(command); //Limpio los backslash por si el usuario se confundio al escribir (ej: "OM\bN" se ve como un ON)
	if(strcmp(command,"ON")==0){
 1ec:	66 e0       	ldi	r22, 0x06	; 6
 1ee:	72 e0       	ldi	r23, 0x02	; 2
 1f0:	0e 94 96 03 	call	0x72c	; 0x72c <strcmp>
 1f4:	89 2b       	or	r24, r25
 1f6:	21 f4       	brne	.+8      	; 0x200 <SGEN_Decode+0x1a>
		SGEN_TurnOn();
 1f8:	0e 94 df 00 	call	0x1be	; 0x1be <SGEN_TurnOn>
		SGEN_SetFreq(atoi(command));
	}
	else{
		return SGEN_ERROR;
	}
	return SGEN_SUCCESS;
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	27 c0       	rjmp	.+78     	; 0x24e <SGEN_Decode+0x68>
	
	SGEN_Cleanup(command); //Limpio los backslash por si el usuario se confundio al escribir (ej: "OM\bN" se ve como un ON)
	if(strcmp(command,"ON")==0){
		SGEN_TurnOn();
	}
	else if(strcmp(command,"OFF")==0) {
 200:	69 e0       	ldi	r22, 0x09	; 9
 202:	72 e0       	ldi	r23, 0x02	; 2
 204:	ce 01       	movw	r24, r28
 206:	0e 94 96 03 	call	0x72c	; 0x72c <strcmp>
 20a:	89 2b       	or	r24, r25
 20c:	21 f4       	brne	.+8      	; 0x216 <SGEN_Decode+0x30>
		SGEN_TurnOff();
 20e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SGEN_TurnOff>
		SGEN_SetFreq(atoi(command));
	}
	else{
		return SGEN_ERROR;
	}
	return SGEN_SUCCESS;
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	1c c0       	rjmp	.+56     	; 0x24e <SGEN_Decode+0x68>
		SGEN_TurnOn();
	}
	else if(strcmp(command,"OFF")==0) {
		SGEN_TurnOff();
	}
	else if(strcmp(command,"RST")==0){
 216:	6d e0       	ldi	r22, 0x0D	; 13
 218:	72 e0       	ldi	r23, 0x02	; 2
 21a:	ce 01       	movw	r24, r28
 21c:	0e 94 96 03 	call	0x72c	; 0x72c <strcmp>
 220:	89 2b       	or	r24, r25
 222:	21 f4       	brne	.+8      	; 0x22c <SGEN_Decode+0x46>
		SGEN_RST();
 224:	0e 94 ee 00 	call	0x1dc	; 0x1dc <SGEN_RST>
		return SGEN_RESET;
 228:	8a e2       	ldi	r24, 0x2A	; 42
 22a:	11 c0       	rjmp	.+34     	; 0x24e <SGEN_Decode+0x68>
	}
	else if(atoi(command)>=100 && atoi(command)<=10000){
 22c:	ce 01       	movw	r24, r28
 22e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <atoi>
 232:	84 36       	cpi	r24, 0x64	; 100
 234:	91 05       	cpc	r25, r1
 236:	44 f0       	brlt	.+16     	; 0x248 <SGEN_Decode+0x62>
 238:	81 31       	cpi	r24, 0x11	; 17
 23a:	27 e2       	ldi	r18, 0x27	; 39
 23c:	92 07       	cpc	r25, r18
 23e:	34 f4       	brge	.+12     	; 0x24c <SGEN_Decode+0x66>
		SGEN_SetFreq(atoi(command));
 240:	0e 94 c6 00 	call	0x18c	; 0x18c <SGEN_SetFreq>
	}
	else{
		return SGEN_ERROR;
	}
	return SGEN_SUCCESS;
 244:	80 e0       	ldi	r24, 0x00	; 0
	else if(strcmp(command,"RST")==0){
		SGEN_RST();
		return SGEN_RESET;
	}
	else if(atoi(command)>=100 && atoi(command)<=10000){
		SGEN_SetFreq(atoi(command));
 246:	03 c0       	rjmp	.+6      	; 0x24e <SGEN_Decode+0x68>
	}
	else{
		return SGEN_ERROR;
 248:	85 e4       	ldi	r24, 0x45	; 69
 24a:	01 c0       	rjmp	.+2      	; 0x24e <SGEN_Decode+0x68>
 24c:	85 e4       	ldi	r24, 0x45	; 69
	}
	return SGEN_SUCCESS;
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <TIMERCONFIG_Init>:



void TIMERCONFIG_Init(uint8_t mode, uint8_t prescaler){
	
	DDRB = (1<<PORTB1); //Configuro el puerto PB1 como salida
 254:	92 e0       	ldi	r25, 0x02	; 2
 256:	94 b9       	out	0x04, r25	; 4
	switch(mode)
 258:	84 30       	cpi	r24, 0x04	; 4
 25a:	29 f4       	brne	.+10     	; 0x266 <TIMERCONFIG_Init+0x12>
	{
		case TIMERCONFIG_CTC:
			TCCR1B |= (1<<WGM12);
 25c:	e1 e8       	ldi	r30, 0x81	; 129
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	88 60       	ori	r24, 0x08	; 8
 264:	80 83       	st	Z, r24
			break;
		default:
			break; //normal mode
	}
	switch(prescaler)
 266:	68 30       	cpi	r22, 0x08	; 8
 268:	29 f4       	brne	.+10     	; 0x274 <TIMERCONFIG_Init+0x20>
	{
		case TIMERCONFIG_PRESCALER_8:
			TCCR1B |= (1<<CS11);
 26a:	e1 e8       	ldi	r30, 0x81	; 129
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	82 60       	ori	r24, 0x02	; 2
 272:	80 83       	st	Z, r24
			break;
		default:
			break; //deactivate timer1
	}
	OCR1A=BASE_FREQ; //La librería setea el registro OCR1A base
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	9f ef       	ldi	r25, 0xFF	; 255
 278:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 27c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 280:	08 95       	ret

00000282 <TIMERCONFIG_SetOCR1A>:
}

void TIMERCONFIG_SetOCR1A(uint16_t value){
	OCR1A = value;
 282:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 286:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 28a:	08 95       	ret

0000028c <TIMERCONFIG_ActivateToggle>:
}

void TIMERCONFIG_ActivateToggle(){
	TCCR1A |= (1<<COM1A0); //Activo toggle de OC1A
 28c:	e0 e8       	ldi	r30, 0x80	; 128
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	80 64       	ori	r24, 0x40	; 64
 294:	80 83       	st	Z, r24
 296:	08 95       	ret

00000298 <TIMERCONFIG_DeactivateToggle>:
}
void TIMERCONFIG_DeactivateToggle(){
	TCCR1A &= ~(1<<COM1A0); //Desactivo toggle de OC1A
 298:	e0 e8       	ldi	r30, 0x80	; 128
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	8f 7b       	andi	r24, 0xBF	; 191
 2a0:	80 83       	st	Z, r24
 2a2:	08 95       	ret

000002a4 <UART_Init>:
#else
	//nada
#endif
*/

void UART_Init(uint8_t baud_rate,uint8_t TxEnable,uint8_t RxEnable){
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	d6 2f       	mov	r29, r22
 2aa:	c4 2f       	mov	r28, r20
	// config = 0x33 ==> Configuro UART 9600bps, 8 bit data, 1 stop @ F_CPU = 8MHz.
	// config = 0x25 ==> Configuro UART 9600bps, 8 bit data, 1 stop @ F_CPU = 4Hz.
	//Utilizo las funciones de la librería que encapsula el hardware
	SerialPort_Init(baud_rate);
 2ac:	0e 94 98 00 	call	0x130	; 0x130 <SerialPort_Init>
	if(TxEnable){
 2b0:	d1 11       	cpse	r29, r1
		SerialPort_TX_Enable();
 2b2:	0e 94 a2 00 	call	0x144	; 0x144 <SerialPort_TX_Enable>
	}
	if(RxEnable){
 2b6:	c1 11       	cpse	r28, r1
		SerialPort_RX_Enable();
 2b8:	0e 94 b4 00 	call	0x168	; 0x168 <SerialPort_RX_Enable>
	}
	SerialPort_RX_Interrupt_Enable();	
 2bc:	0e 94 ba 00 	call	0x174	; 0x174 <SerialPort_RX_Interrupt_Enable>
}
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <UART_Write_Char_To_Buffer>:
	//SerialPort_RX_Interrupt_Disable(); //podria deshabilitar la escritura mientras
}

void UART_Write_Char_To_Buffer(const char data)
{
	if(TXindice_escritura < TX_BUFFER_LENGTH)
 2c6:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <TXindice_escritura>
 2ca:	96 3e       	cpi	r25, 0xE6	; 230
 2cc:	40 f4       	brcc	.+16     	; 0x2de <UART_Write_Char_To_Buffer+0x18>
	{
		TX_Buffer[TXindice_escritura] = data;
 2ce:	e9 2f       	mov	r30, r25
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	e4 5c       	subi	r30, 0xC4	; 196
 2d4:	fd 4f       	sbci	r31, 0xFD	; 253
 2d6:	80 83       	st	Z, r24
		TXindice_escritura++;
 2d8:	9f 5f       	subi	r25, 0xFF	; 255
 2da:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <TXindice_escritura>
 2de:	08 95       	ret

000002e0 <UART_PrintString>:
	return 0;
}
*/

void UART_PrintString( const char* STR_PTR )
{
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	8c 01       	movw	r16, r24
	unsigned char i = 0;
 2e8:	c0 e0       	ldi	r28, 0x00	; 0
	while(STR_PTR[i]!='\0')
 2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <UART_PrintString+0x12>
	{
		UART_Write_Char_To_Buffer(STR_PTR[i]);
 2ec:	0e 94 63 01 	call	0x2c6	; 0x2c6 <UART_Write_Char_To_Buffer>
		i++;
 2f0:	cf 5f       	subi	r28, 0xFF	; 255
*/

void UART_PrintString( const char* STR_PTR )
{
	unsigned char i = 0;
	while(STR_PTR[i]!='\0')
 2f2:	f8 01       	movw	r30, r16
 2f4:	ec 0f       	add	r30, r28
 2f6:	f1 1d       	adc	r31, r1
 2f8:	80 81       	ld	r24, Z
 2fa:	81 11       	cpse	r24, r1
 2fc:	f7 cf       	rjmp	.-18     	; 0x2ec <UART_PrintString+0xc>
	{
		UART_Write_Char_To_Buffer(STR_PTR[i]);
		i++;
	}
	imprimiendoMensaje=1;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <imprimiendoMensaje>
	SerialPort_TX_Interrupt_Enable();
 304:	0e 94 a8 00 	call	0x150	; 0x150 <SerialPort_TX_Interrupt_Enable>
	//SerialPort_RX_Interrupt_Disable(); //podria deshabilitar la escritura mientras
}
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	08 95       	ret

00000310 <UART_GetString>:
		Error_code= ERROR_UART_FULL_BUFF;
	}
}

 char* UART_GetString(){
	strcpy(RX_Buf_Cpy,RX_Buffer);
 310:	68 e2       	ldi	r22, 0x28	; 40
 312:	72 e0       	ldi	r23, 0x02	; 2
 314:	84 e1       	ldi	r24, 0x14	; 20
 316:	92 e0       	ldi	r25, 0x02	; 2
 318:	0e 94 9f 03 	call	0x73e	; 0x73e <strcpy>
	return RX_Buf_Cpy; //envio la copia del buffer
}
 31c:	84 e1       	ldi	r24, 0x14	; 20
 31e:	92 e0       	ldi	r25, 0x02	; 2
 320:	08 95       	ret

00000322 <UART_HayString>:

unsigned char UART_HayString(){
	if(flag_hayString){
 322:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
 326:	88 23       	and	r24, r24
 328:	19 f0       	breq	.+6      	; 0x330 <UART_HayString+0xe>
		flag_hayString=0;
 32a:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__data_end>
		return 1;
 32e:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		return 0;
	}
}
 330:	08 95       	ret

00000332 <__vector_18>:

ISR (USART_RX_vect){
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	2f 93       	push	r18
 33e:	3f 93       	push	r19
 340:	4f 93       	push	r20
 342:	5f 93       	push	r21
 344:	6f 93       	push	r22
 346:	7f 93       	push	r23
 348:	8f 93       	push	r24
 34a:	9f 93       	push	r25
 34c:	af 93       	push	r26
 34e:	bf 93       	push	r27
 350:	ef 93       	push	r30
 352:	ff 93       	push	r31
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	1f 92       	push	r1
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char dato=SerialPort_Recive_Data();
 35e:	0e 94 c3 00 	call	0x186	; 0x186 <SerialPort_Recive_Data>
 362:	89 83       	std	Y+1, r24	; 0x01
	if(dato!='\r'){
 364:	89 81       	ldd	r24, Y+1	; 0x01
 366:	8d 30       	cpi	r24, 0x0D	; 13
 368:	c9 f0       	breq	.+50     	; 0x39c <__vector_18+0x6a>
		RX_Buffer[RX_Index++%RX_BUFFER_LENGTH] = dato;
 36a:	e0 91 22 03 	lds	r30, 0x0322	; 0x800322 <RX_Index>
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	8e 0f       	add	r24, r30
 372:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <RX_Index>
 376:	8d ec       	ldi	r24, 0xCD	; 205
 378:	e8 9f       	mul	r30, r24
 37a:	81 2d       	mov	r24, r1
 37c:	11 24       	eor	r1, r1
 37e:	82 95       	swap	r24
 380:	8f 70       	andi	r24, 0x0F	; 15
 382:	88 0f       	add	r24, r24
 384:	88 0f       	add	r24, r24
 386:	98 2f       	mov	r25, r24
 388:	99 0f       	add	r25, r25
 38a:	99 0f       	add	r25, r25
 38c:	89 0f       	add	r24, r25
 38e:	e8 1b       	sub	r30, r24
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	89 81       	ldd	r24, Y+1	; 0x01
 394:	e8 5d       	subi	r30, 0xD8	; 216
 396:	fd 4f       	sbci	r31, 0xFD	; 253
 398:	80 83       	st	Z, r24
 39a:	0b c0       	rjmp	.+22     	; 0x3b2 <__vector_18+0x80>
		eco=1;
		SerialPort_TX_Interrupt_Enable();
		#endif
	}
	else{
		RX_Buffer[RX_Index++]='\0';
 39c:	e0 91 22 03 	lds	r30, 0x0322	; 0x800322 <RX_Index>
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	e8 5d       	subi	r30, 0xD8	; 216
 3a4:	fd 4f       	sbci	r31, 0xFD	; 253
 3a6:	10 82       	st	Z, r1
		RX_Index=0;
 3a8:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <RX_Index>
		#ifdef ECO_DEBUG
		UART_PrintString("\n\r");
		#endif
		flag_hayString=1;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
	}
}
 3b2:	0f 90       	pop	r0
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	ff 91       	pop	r31
 3ba:	ef 91       	pop	r30
 3bc:	bf 91       	pop	r27
 3be:	af 91       	pop	r26
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	7f 91       	pop	r23
 3c6:	6f 91       	pop	r22
 3c8:	5f 91       	pop	r21
 3ca:	4f 91       	pop	r20
 3cc:	3f 91       	pop	r19
 3ce:	2f 91       	pop	r18
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <__vector_19>:

ISR(USART_UDRE_vect){
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	2f 93       	push	r18
 3e6:	3f 93       	push	r19
 3e8:	4f 93       	push	r20
 3ea:	5f 93       	push	r21
 3ec:	6f 93       	push	r22
 3ee:	7f 93       	push	r23
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
 3f4:	af 93       	push	r26
 3f6:	bf 93       	push	r27
 3f8:	ef 93       	push	r30
 3fa:	ff 93       	push	r31
		SerialPort_Send_Data(RX_Buffer[(RX_Index-1)%RX_BUFFER_LENGTH]);
		eco=0;
		SerialPort_TX_Interrupt_Disable();
	}
	#endif
	if(imprimiendoMensaje){
 3fc:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <imprimiendoMensaje>
 400:	88 23       	and	r24, r24
 402:	c9 f0       	breq	.+50     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		if(TXindice_lectura<TXindice_escritura){
 404:	e0 91 24 03 	lds	r30, 0x0324	; 0x800324 <TXindice_lectura>
 408:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <TXindice_escritura>
 40c:	e8 17       	cp	r30, r24
 40e:	58 f4       	brcc	.+22     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
			SerialPort_Send_Data(TX_Buffer[TXindice_lectura++]);		
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	8e 0f       	add	r24, r30
 414:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <TXindice_lectura>
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	e4 5c       	subi	r30, 0xC4	; 196
 41c:	fd 4f       	sbci	r31, 0xFD	; 253
 41e:	80 81       	ld	r24, Z
 420:	0e 94 c0 00 	call	0x180	; 0x180 <SerialPort_Send_Data>
 424:	08 c0       	rjmp	.+16     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		}
		else{
			//ya no tengo mas para escribir
			imprimiendoMensaje=0;
 426:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <imprimiendoMensaje>
			TXindice_lectura=0;
 42a:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <TXindice_lectura>
			TXindice_escritura=0;
 42e:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <TXindice_escritura>
			SerialPort_TX_Interrupt_Disable();
 432:	0e 94 ae 00 	call	0x15c	; 0x15c <SerialPort_TX_Interrupt_Disable>
			//SerialPort_RX_Interrupt_Enable(); //podriamos deshabilitar y habilitar lectura de teclado mientras se escribe msj
		}
	}
 436:	ff 91       	pop	r31
 438:	ef 91       	pop	r30
 43a:	bf 91       	pop	r27
 43c:	af 91       	pop	r26
 43e:	9f 91       	pop	r25
 440:	8f 91       	pop	r24
 442:	7f 91       	pop	r23
 444:	6f 91       	pop	r22
 446:	5f 91       	pop	r21
 448:	4f 91       	pop	r20
 44a:	3f 91       	pop	r19
 44c:	2f 91       	pop	r18
 44e:	0f 90       	pop	r0
 450:	0f be       	out	0x3f, r0	; 63
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

00000458 <__subsf3>:
 458:	50 58       	subi	r21, 0x80	; 128

0000045a <__addsf3>:
 45a:	bb 27       	eor	r27, r27
 45c:	aa 27       	eor	r26, r26
 45e:	0e 94 44 02 	call	0x488	; 0x488 <__addsf3x>
 462:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_round>
 466:	0e 94 0e 03 	call	0x61c	; 0x61c <__fp_pscA>
 46a:	38 f0       	brcs	.+14     	; 0x47a <__addsf3+0x20>
 46c:	0e 94 15 03 	call	0x62a	; 0x62a <__fp_pscB>
 470:	20 f0       	brcs	.+8      	; 0x47a <__addsf3+0x20>
 472:	39 f4       	brne	.+14     	; 0x482 <__addsf3+0x28>
 474:	9f 3f       	cpi	r25, 0xFF	; 255
 476:	19 f4       	brne	.+6      	; 0x47e <__addsf3+0x24>
 478:	26 f4       	brtc	.+8      	; 0x482 <__addsf3+0x28>
 47a:	0c 94 0b 03 	jmp	0x616	; 0x616 <__fp_nan>
 47e:	0e f4       	brtc	.+2      	; 0x482 <__addsf3+0x28>
 480:	e0 95       	com	r30
 482:	e7 fb       	bst	r30, 7
 484:	0c 94 05 03 	jmp	0x60a	; 0x60a <__fp_inf>

00000488 <__addsf3x>:
 488:	e9 2f       	mov	r30, r25
 48a:	0e 94 2d 03 	call	0x65a	; 0x65a <__fp_split3>
 48e:	58 f3       	brcs	.-42     	; 0x466 <__addsf3+0xc>
 490:	ba 17       	cp	r27, r26
 492:	62 07       	cpc	r22, r18
 494:	73 07       	cpc	r23, r19
 496:	84 07       	cpc	r24, r20
 498:	95 07       	cpc	r25, r21
 49a:	20 f0       	brcs	.+8      	; 0x4a4 <__addsf3x+0x1c>
 49c:	79 f4       	brne	.+30     	; 0x4bc <__addsf3x+0x34>
 49e:	a6 f5       	brtc	.+104    	; 0x508 <__addsf3x+0x80>
 4a0:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__fp_zero>
 4a4:	0e f4       	brtc	.+2      	; 0x4a8 <__addsf3x+0x20>
 4a6:	e0 95       	com	r30
 4a8:	0b 2e       	mov	r0, r27
 4aa:	ba 2f       	mov	r27, r26
 4ac:	a0 2d       	mov	r26, r0
 4ae:	0b 01       	movw	r0, r22
 4b0:	b9 01       	movw	r22, r18
 4b2:	90 01       	movw	r18, r0
 4b4:	0c 01       	movw	r0, r24
 4b6:	ca 01       	movw	r24, r20
 4b8:	a0 01       	movw	r20, r0
 4ba:	11 24       	eor	r1, r1
 4bc:	ff 27       	eor	r31, r31
 4be:	59 1b       	sub	r21, r25
 4c0:	99 f0       	breq	.+38     	; 0x4e8 <__addsf3x+0x60>
 4c2:	59 3f       	cpi	r21, 0xF9	; 249
 4c4:	50 f4       	brcc	.+20     	; 0x4da <__addsf3x+0x52>
 4c6:	50 3e       	cpi	r21, 0xE0	; 224
 4c8:	68 f1       	brcs	.+90     	; 0x524 <__addsf3x+0x9c>
 4ca:	1a 16       	cp	r1, r26
 4cc:	f0 40       	sbci	r31, 0x00	; 0
 4ce:	a2 2f       	mov	r26, r18
 4d0:	23 2f       	mov	r18, r19
 4d2:	34 2f       	mov	r19, r20
 4d4:	44 27       	eor	r20, r20
 4d6:	58 5f       	subi	r21, 0xF8	; 248
 4d8:	f3 cf       	rjmp	.-26     	; 0x4c0 <__addsf3x+0x38>
 4da:	46 95       	lsr	r20
 4dc:	37 95       	ror	r19
 4de:	27 95       	ror	r18
 4e0:	a7 95       	ror	r26
 4e2:	f0 40       	sbci	r31, 0x00	; 0
 4e4:	53 95       	inc	r21
 4e6:	c9 f7       	brne	.-14     	; 0x4da <__addsf3x+0x52>
 4e8:	7e f4       	brtc	.+30     	; 0x508 <__addsf3x+0x80>
 4ea:	1f 16       	cp	r1, r31
 4ec:	ba 0b       	sbc	r27, r26
 4ee:	62 0b       	sbc	r22, r18
 4f0:	73 0b       	sbc	r23, r19
 4f2:	84 0b       	sbc	r24, r20
 4f4:	ba f0       	brmi	.+46     	; 0x524 <__addsf3x+0x9c>
 4f6:	91 50       	subi	r25, 0x01	; 1
 4f8:	a1 f0       	breq	.+40     	; 0x522 <__addsf3x+0x9a>
 4fa:	ff 0f       	add	r31, r31
 4fc:	bb 1f       	adc	r27, r27
 4fe:	66 1f       	adc	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	88 1f       	adc	r24, r24
 504:	c2 f7       	brpl	.-16     	; 0x4f6 <__addsf3x+0x6e>
 506:	0e c0       	rjmp	.+28     	; 0x524 <__addsf3x+0x9c>
 508:	ba 0f       	add	r27, r26
 50a:	62 1f       	adc	r22, r18
 50c:	73 1f       	adc	r23, r19
 50e:	84 1f       	adc	r24, r20
 510:	48 f4       	brcc	.+18     	; 0x524 <__addsf3x+0x9c>
 512:	87 95       	ror	r24
 514:	77 95       	ror	r23
 516:	67 95       	ror	r22
 518:	b7 95       	ror	r27
 51a:	f7 95       	ror	r31
 51c:	9e 3f       	cpi	r25, 0xFE	; 254
 51e:	08 f0       	brcs	.+2      	; 0x522 <__addsf3x+0x9a>
 520:	b0 cf       	rjmp	.-160    	; 0x482 <__addsf3+0x28>
 522:	93 95       	inc	r25
 524:	88 0f       	add	r24, r24
 526:	08 f0       	brcs	.+2      	; 0x52a <__addsf3x+0xa2>
 528:	99 27       	eor	r25, r25
 52a:	ee 0f       	add	r30, r30
 52c:	97 95       	ror	r25
 52e:	87 95       	ror	r24
 530:	08 95       	ret

00000532 <__fixunssfsi>:
 532:	0e 94 35 03 	call	0x66a	; 0x66a <__fp_splitA>
 536:	88 f0       	brcs	.+34     	; 0x55a <__fixunssfsi+0x28>
 538:	9f 57       	subi	r25, 0x7F	; 127
 53a:	98 f0       	brcs	.+38     	; 0x562 <__fixunssfsi+0x30>
 53c:	b9 2f       	mov	r27, r25
 53e:	99 27       	eor	r25, r25
 540:	b7 51       	subi	r27, 0x17	; 23
 542:	b0 f0       	brcs	.+44     	; 0x570 <__fixunssfsi+0x3e>
 544:	e1 f0       	breq	.+56     	; 0x57e <__fixunssfsi+0x4c>
 546:	66 0f       	add	r22, r22
 548:	77 1f       	adc	r23, r23
 54a:	88 1f       	adc	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	1a f0       	brmi	.+6      	; 0x556 <__fixunssfsi+0x24>
 550:	ba 95       	dec	r27
 552:	c9 f7       	brne	.-14     	; 0x546 <__fixunssfsi+0x14>
 554:	14 c0       	rjmp	.+40     	; 0x57e <__fixunssfsi+0x4c>
 556:	b1 30       	cpi	r27, 0x01	; 1
 558:	91 f0       	breq	.+36     	; 0x57e <__fixunssfsi+0x4c>
 55a:	0e 94 4f 03 	call	0x69e	; 0x69e <__fp_zero>
 55e:	b1 e0       	ldi	r27, 0x01	; 1
 560:	08 95       	ret
 562:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__fp_zero>
 566:	67 2f       	mov	r22, r23
 568:	78 2f       	mov	r23, r24
 56a:	88 27       	eor	r24, r24
 56c:	b8 5f       	subi	r27, 0xF8	; 248
 56e:	39 f0       	breq	.+14     	; 0x57e <__fixunssfsi+0x4c>
 570:	b9 3f       	cpi	r27, 0xF9	; 249
 572:	cc f3       	brlt	.-14     	; 0x566 <__fixunssfsi+0x34>
 574:	86 95       	lsr	r24
 576:	77 95       	ror	r23
 578:	67 95       	ror	r22
 57a:	b3 95       	inc	r27
 57c:	d9 f7       	brne	.-10     	; 0x574 <__fixunssfsi+0x42>
 57e:	3e f4       	brtc	.+14     	; 0x58e <__fixunssfsi+0x5c>
 580:	90 95       	com	r25
 582:	80 95       	com	r24
 584:	70 95       	com	r23
 586:	61 95       	neg	r22
 588:	7f 4f       	sbci	r23, 0xFF	; 255
 58a:	8f 4f       	sbci	r24, 0xFF	; 255
 58c:	9f 4f       	sbci	r25, 0xFF	; 255
 58e:	08 95       	ret

00000590 <__floatunsisf>:
 590:	e8 94       	clt
 592:	09 c0       	rjmp	.+18     	; 0x5a6 <__floatsisf+0x12>

00000594 <__floatsisf>:
 594:	97 fb       	bst	r25, 7
 596:	3e f4       	brtc	.+14     	; 0x5a6 <__floatsisf+0x12>
 598:	90 95       	com	r25
 59a:	80 95       	com	r24
 59c:	70 95       	com	r23
 59e:	61 95       	neg	r22
 5a0:	7f 4f       	sbci	r23, 0xFF	; 255
 5a2:	8f 4f       	sbci	r24, 0xFF	; 255
 5a4:	9f 4f       	sbci	r25, 0xFF	; 255
 5a6:	99 23       	and	r25, r25
 5a8:	a9 f0       	breq	.+42     	; 0x5d4 <__floatsisf+0x40>
 5aa:	f9 2f       	mov	r31, r25
 5ac:	96 e9       	ldi	r25, 0x96	; 150
 5ae:	bb 27       	eor	r27, r27
 5b0:	93 95       	inc	r25
 5b2:	f6 95       	lsr	r31
 5b4:	87 95       	ror	r24
 5b6:	77 95       	ror	r23
 5b8:	67 95       	ror	r22
 5ba:	b7 95       	ror	r27
 5bc:	f1 11       	cpse	r31, r1
 5be:	f8 cf       	rjmp	.-16     	; 0x5b0 <__floatsisf+0x1c>
 5c0:	fa f4       	brpl	.+62     	; 0x600 <__floatsisf+0x6c>
 5c2:	bb 0f       	add	r27, r27
 5c4:	11 f4       	brne	.+4      	; 0x5ca <__floatsisf+0x36>
 5c6:	60 ff       	sbrs	r22, 0
 5c8:	1b c0       	rjmp	.+54     	; 0x600 <__floatsisf+0x6c>
 5ca:	6f 5f       	subi	r22, 0xFF	; 255
 5cc:	7f 4f       	sbci	r23, 0xFF	; 255
 5ce:	8f 4f       	sbci	r24, 0xFF	; 255
 5d0:	9f 4f       	sbci	r25, 0xFF	; 255
 5d2:	16 c0       	rjmp	.+44     	; 0x600 <__floatsisf+0x6c>
 5d4:	88 23       	and	r24, r24
 5d6:	11 f0       	breq	.+4      	; 0x5dc <__floatsisf+0x48>
 5d8:	96 e9       	ldi	r25, 0x96	; 150
 5da:	11 c0       	rjmp	.+34     	; 0x5fe <__floatsisf+0x6a>
 5dc:	77 23       	and	r23, r23
 5de:	21 f0       	breq	.+8      	; 0x5e8 <__floatsisf+0x54>
 5e0:	9e e8       	ldi	r25, 0x8E	; 142
 5e2:	87 2f       	mov	r24, r23
 5e4:	76 2f       	mov	r23, r22
 5e6:	05 c0       	rjmp	.+10     	; 0x5f2 <__floatsisf+0x5e>
 5e8:	66 23       	and	r22, r22
 5ea:	71 f0       	breq	.+28     	; 0x608 <__floatsisf+0x74>
 5ec:	96 e8       	ldi	r25, 0x86	; 134
 5ee:	86 2f       	mov	r24, r22
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	2a f0       	brmi	.+10     	; 0x600 <__floatsisf+0x6c>
 5f6:	9a 95       	dec	r25
 5f8:	66 0f       	add	r22, r22
 5fa:	77 1f       	adc	r23, r23
 5fc:	88 1f       	adc	r24, r24
 5fe:	da f7       	brpl	.-10     	; 0x5f6 <__floatsisf+0x62>
 600:	88 0f       	add	r24, r24
 602:	96 95       	lsr	r25
 604:	87 95       	ror	r24
 606:	97 f9       	bld	r25, 7
 608:	08 95       	ret

0000060a <__fp_inf>:
 60a:	97 f9       	bld	r25, 7
 60c:	9f 67       	ori	r25, 0x7F	; 127
 60e:	80 e8       	ldi	r24, 0x80	; 128
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	08 95       	ret

00000616 <__fp_nan>:
 616:	9f ef       	ldi	r25, 0xFF	; 255
 618:	80 ec       	ldi	r24, 0xC0	; 192
 61a:	08 95       	ret

0000061c <__fp_pscA>:
 61c:	00 24       	eor	r0, r0
 61e:	0a 94       	dec	r0
 620:	16 16       	cp	r1, r22
 622:	17 06       	cpc	r1, r23
 624:	18 06       	cpc	r1, r24
 626:	09 06       	cpc	r0, r25
 628:	08 95       	ret

0000062a <__fp_pscB>:
 62a:	00 24       	eor	r0, r0
 62c:	0a 94       	dec	r0
 62e:	12 16       	cp	r1, r18
 630:	13 06       	cpc	r1, r19
 632:	14 06       	cpc	r1, r20
 634:	05 06       	cpc	r0, r21
 636:	08 95       	ret

00000638 <__fp_round>:
 638:	09 2e       	mov	r0, r25
 63a:	03 94       	inc	r0
 63c:	00 0c       	add	r0, r0
 63e:	11 f4       	brne	.+4      	; 0x644 <__fp_round+0xc>
 640:	88 23       	and	r24, r24
 642:	52 f0       	brmi	.+20     	; 0x658 <__fp_round+0x20>
 644:	bb 0f       	add	r27, r27
 646:	40 f4       	brcc	.+16     	; 0x658 <__fp_round+0x20>
 648:	bf 2b       	or	r27, r31
 64a:	11 f4       	brne	.+4      	; 0x650 <__fp_round+0x18>
 64c:	60 ff       	sbrs	r22, 0
 64e:	04 c0       	rjmp	.+8      	; 0x658 <__fp_round+0x20>
 650:	6f 5f       	subi	r22, 0xFF	; 255
 652:	7f 4f       	sbci	r23, 0xFF	; 255
 654:	8f 4f       	sbci	r24, 0xFF	; 255
 656:	9f 4f       	sbci	r25, 0xFF	; 255
 658:	08 95       	ret

0000065a <__fp_split3>:
 65a:	57 fd       	sbrc	r21, 7
 65c:	90 58       	subi	r25, 0x80	; 128
 65e:	44 0f       	add	r20, r20
 660:	55 1f       	adc	r21, r21
 662:	59 f0       	breq	.+22     	; 0x67a <__fp_splitA+0x10>
 664:	5f 3f       	cpi	r21, 0xFF	; 255
 666:	71 f0       	breq	.+28     	; 0x684 <__fp_splitA+0x1a>
 668:	47 95       	ror	r20

0000066a <__fp_splitA>:
 66a:	88 0f       	add	r24, r24
 66c:	97 fb       	bst	r25, 7
 66e:	99 1f       	adc	r25, r25
 670:	61 f0       	breq	.+24     	; 0x68a <__fp_splitA+0x20>
 672:	9f 3f       	cpi	r25, 0xFF	; 255
 674:	79 f0       	breq	.+30     	; 0x694 <__fp_splitA+0x2a>
 676:	87 95       	ror	r24
 678:	08 95       	ret
 67a:	12 16       	cp	r1, r18
 67c:	13 06       	cpc	r1, r19
 67e:	14 06       	cpc	r1, r20
 680:	55 1f       	adc	r21, r21
 682:	f2 cf       	rjmp	.-28     	; 0x668 <__fp_split3+0xe>
 684:	46 95       	lsr	r20
 686:	f1 df       	rcall	.-30     	; 0x66a <__fp_splitA>
 688:	08 c0       	rjmp	.+16     	; 0x69a <__fp_splitA+0x30>
 68a:	16 16       	cp	r1, r22
 68c:	17 06       	cpc	r1, r23
 68e:	18 06       	cpc	r1, r24
 690:	99 1f       	adc	r25, r25
 692:	f1 cf       	rjmp	.-30     	; 0x676 <__fp_splitA+0xc>
 694:	86 95       	lsr	r24
 696:	71 05       	cpc	r23, r1
 698:	61 05       	cpc	r22, r1
 69a:	08 94       	sec
 69c:	08 95       	ret

0000069e <__fp_zero>:
 69e:	e8 94       	clt

000006a0 <__fp_szero>:
 6a0:	bb 27       	eor	r27, r27
 6a2:	66 27       	eor	r22, r22
 6a4:	77 27       	eor	r23, r23
 6a6:	cb 01       	movw	r24, r22
 6a8:	97 f9       	bld	r25, 7
 6aa:	08 95       	ret

000006ac <__udivmodsi4>:
 6ac:	a1 e2       	ldi	r26, 0x21	; 33
 6ae:	1a 2e       	mov	r1, r26
 6b0:	aa 1b       	sub	r26, r26
 6b2:	bb 1b       	sub	r27, r27
 6b4:	fd 01       	movw	r30, r26
 6b6:	0d c0       	rjmp	.+26     	; 0x6d2 <__udivmodsi4_ep>

000006b8 <__udivmodsi4_loop>:
 6b8:	aa 1f       	adc	r26, r26
 6ba:	bb 1f       	adc	r27, r27
 6bc:	ee 1f       	adc	r30, r30
 6be:	ff 1f       	adc	r31, r31
 6c0:	a2 17       	cp	r26, r18
 6c2:	b3 07       	cpc	r27, r19
 6c4:	e4 07       	cpc	r30, r20
 6c6:	f5 07       	cpc	r31, r21
 6c8:	20 f0       	brcs	.+8      	; 0x6d2 <__udivmodsi4_ep>
 6ca:	a2 1b       	sub	r26, r18
 6cc:	b3 0b       	sbc	r27, r19
 6ce:	e4 0b       	sbc	r30, r20
 6d0:	f5 0b       	sbc	r31, r21

000006d2 <__udivmodsi4_ep>:
 6d2:	66 1f       	adc	r22, r22
 6d4:	77 1f       	adc	r23, r23
 6d6:	88 1f       	adc	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	1a 94       	dec	r1
 6dc:	69 f7       	brne	.-38     	; 0x6b8 <__udivmodsi4_loop>
 6de:	60 95       	com	r22
 6e0:	70 95       	com	r23
 6e2:	80 95       	com	r24
 6e4:	90 95       	com	r25
 6e6:	9b 01       	movw	r18, r22
 6e8:	ac 01       	movw	r20, r24
 6ea:	bd 01       	movw	r22, r26
 6ec:	cf 01       	movw	r24, r30
 6ee:	08 95       	ret

000006f0 <atoi>:
 6f0:	fc 01       	movw	r30, r24
 6f2:	88 27       	eor	r24, r24
 6f4:	99 27       	eor	r25, r25
 6f6:	e8 94       	clt
 6f8:	21 91       	ld	r18, Z+
 6fa:	20 32       	cpi	r18, 0x20	; 32
 6fc:	e9 f3       	breq	.-6      	; 0x6f8 <atoi+0x8>
 6fe:	29 30       	cpi	r18, 0x09	; 9
 700:	10 f0       	brcs	.+4      	; 0x706 <atoi+0x16>
 702:	2e 30       	cpi	r18, 0x0E	; 14
 704:	c8 f3       	brcs	.-14     	; 0x6f8 <atoi+0x8>
 706:	2b 32       	cpi	r18, 0x2B	; 43
 708:	41 f0       	breq	.+16     	; 0x71a <atoi+0x2a>
 70a:	2d 32       	cpi	r18, 0x2D	; 45
 70c:	39 f4       	brne	.+14     	; 0x71c <atoi+0x2c>
 70e:	68 94       	set
 710:	04 c0       	rjmp	.+8      	; 0x71a <atoi+0x2a>
 712:	0e 94 a6 03 	call	0x74c	; 0x74c <__mulhi_const_10>
 716:	82 0f       	add	r24, r18
 718:	91 1d       	adc	r25, r1
 71a:	21 91       	ld	r18, Z+
 71c:	20 53       	subi	r18, 0x30	; 48
 71e:	2a 30       	cpi	r18, 0x0A	; 10
 720:	c0 f3       	brcs	.-16     	; 0x712 <atoi+0x22>
 722:	1e f4       	brtc	.+6      	; 0x72a <atoi+0x3a>
 724:	90 95       	com	r25
 726:	81 95       	neg	r24
 728:	9f 4f       	sbci	r25, 0xFF	; 255
 72a:	08 95       	ret

0000072c <strcmp>:
 72c:	fb 01       	movw	r30, r22
 72e:	dc 01       	movw	r26, r24
 730:	8d 91       	ld	r24, X+
 732:	01 90       	ld	r0, Z+
 734:	80 19       	sub	r24, r0
 736:	01 10       	cpse	r0, r1
 738:	d9 f3       	breq	.-10     	; 0x730 <strcmp+0x4>
 73a:	99 0b       	sbc	r25, r25
 73c:	08 95       	ret

0000073e <strcpy>:
 73e:	fb 01       	movw	r30, r22
 740:	dc 01       	movw	r26, r24
 742:	01 90       	ld	r0, Z+
 744:	0d 92       	st	X+, r0
 746:	00 20       	and	r0, r0
 748:	e1 f7       	brne	.-8      	; 0x742 <strcpy+0x4>
 74a:	08 95       	ret

0000074c <__mulhi_const_10>:
 74c:	7a e0       	ldi	r23, 0x0A	; 10
 74e:	97 9f       	mul	r25, r23
 750:	90 2d       	mov	r25, r0
 752:	87 9f       	mul	r24, r23
 754:	80 2d       	mov	r24, r0
 756:	91 0d       	add	r25, r1
 758:	11 24       	eor	r1, r1
 75a:	08 95       	ret

0000075c <_exit>:
 75c:	f8 94       	cli

0000075e <__stop_program>:
 75e:	ff cf       	rjmp	.-2      	; 0x75e <__stop_program>
