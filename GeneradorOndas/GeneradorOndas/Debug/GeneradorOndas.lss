
GeneradorOndas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017e  00800100  0000043c  000004d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fa  0080027e  0080027e  0000064e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a2  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4e  00000000  00000000  000018a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000083b  00000000  00000000  000022f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000344  00000000  00000000  00002b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ad  00000000  00000000  00002e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006b7  00000000  00000000  0000351d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003bd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__vector_18>
  4c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 37       	cpi	r26, 0x7E	; 126
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	ae e7       	ldi	r26, 0x7E	; 126
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 37       	cpi	r26, 0x78	; 120
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 1c 02 	jmp	0x438	; 0x438 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 */ 


#include "main.h"
int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	c5 50       	subi	r28, 0x05	; 5
  b0:	d1 40       	sbci	r29, 0x01	; 1
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	cd bf       	out	0x3d, r28	; 61
    char welcomeMsj[] = "Bienvenidx al generador de señales digitales programable\r Por favor, ingrese una frecuencia entre 100 y 10000Hz o un comando\r ON: encender generador(frecuencia por defecto: 100Hz), OFF: apagar generador, RST: reiniciar\r\n";
  bc:	8d ed       	ldi	r24, 0xDD	; 221
  be:	ee e0       	ldi	r30, 0x0E	; 14
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	de 01       	movw	r26, r28
  c4:	11 96       	adiw	r26, 0x01	; 1
  c6:	01 90       	ld	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	8a 95       	dec	r24
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x20>
	char errorMsj[] = "Lo siento, no he entendido el comando\r\n";
  ce:	88 e2       	ldi	r24, 0x28	; 40
  d0:	eb ee       	ldi	r30, 0xEB	; 235
  d2:	f1 e0       	ldi	r31, 0x01	; 1
  d4:	de 01       	movw	r26, r28
  d6:	a2 52       	subi	r26, 0x22	; 34
  d8:	bf 4f       	sbci	r27, 0xFF	; 255
  da:	01 90       	ld	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	8a 95       	dec	r24
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x34>
	unsigned char command = 0;
	
	UART_Init(BAUD_RATE,1,1); //inicializo la uart
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	83 e3       	ldi	r24, 0x33	; 51
  e8:	0e 94 04 01 	call	0x208	; 0x208 <UART_Init>
	SGEN_Init(); //inicializo generadora de señales
  ec:	0e 94 cf 00 	call	0x19e	; 0x19e <SGEN_Init>
	sei();
  f0:	78 94       	sei
	
	UART_PrintString(welcomeMsj); //Imprimo mensaje de bienvenida
  f2:	ce 01       	movw	r24, r28
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	0e 94 22 01 	call	0x244	; 0x244 <UART_PrintString>
#include "main.h"
int main(void)
{
    char welcomeMsj[] = "Bienvenidx al generador de señales digitales programable\r Por favor, ingrese una frecuencia entre 100 y 10000Hz o un comando\r ON: encender generador(frecuencia por defecto: 100Hz), OFF: apagar generador, RST: reiniciar\r\n";
	char errorMsj[] = "Lo siento, no he entendido el comando\r\n";
	unsigned char command = 0;
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	01 c0       	rjmp	.+2      	; 0x100 <main+0x5a>
			//print error msj
			command=0;
		}
		else if (command==SGEN_RESET){
			//restart and print welcome msj
			command=0;
  fe:	10 e0       	ldi	r17, 0x00	; 0
	
	UART_PrintString(welcomeMsj); //Imprimo mensaje de bienvenida
	
    while (1) 
    {
		if(UART_HayString()){ //flag de la UART de \r
 100:	0e 94 47 01 	call	0x28e	; 0x28e <UART_HayString>
 104:	88 23       	and	r24, r24
 106:	29 f0       	breq	.+10     	; 0x112 <main+0x6c>
			command = SGEN_Decode(UART_GetString()); //returns number of error
 108:	0e 94 3a 01 	call	0x274	; 0x274 <UART_GetString>
 10c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <SGEN_Decode>
 110:	18 2f       	mov	r17, r24
		}
		//Comportamiento si dio error o se reinicio
		if(command==SGEN_ERROR){
 112:	15 33       	cpi	r17, 0x35	; 53
 114:	39 f4       	brne	.+14     	; 0x124 <main+0x7e>
			UART_PrintString(errorMsj);
 116:	ce 01       	movw	r24, r28
 118:	82 52       	subi	r24, 0x22	; 34
 11a:	9f 4f       	sbci	r25, 0xFF	; 255
 11c:	0e 94 22 01 	call	0x244	; 0x244 <UART_PrintString>
			//print error msj
			command=0;
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	ee cf       	rjmp	.-36     	; 0x100 <main+0x5a>
		}
		else if (command==SGEN_RESET){
 124:	15 34       	cpi	r17, 0x45	; 69
 126:	61 f7       	brne	.-40     	; 0x100 <main+0x5a>
 128:	ea cf       	rjmp	.-44     	; 0xfe <main+0x58>

0000012a <SerialPort_Init>:

// Espera hasta que el buffer de TX este libre.
void SerialPort_Wait_For_TX_Buffer_Free(void){
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
}
 12a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 12e:	96 e0       	ldi	r25, 0x06	; 6
 130:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 134:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 138:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 13c:	08 95       	ret

0000013e <SerialPort_TX_Enable>:
 13e:	e1 ec       	ldi	r30, 0xC1	; 193
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	88 60       	ori	r24, 0x08	; 8
 146:	80 83       	st	Z, r24
 148:	08 95       	ret

0000014a <SerialPort_TX_Interrupt_Enable>:
 14a:	e1 ec       	ldi	r30, 0xC1	; 193
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	80 62       	ori	r24, 0x20	; 32
 152:	80 83       	st	Z, r24
 154:	08 95       	ret

00000156 <SerialPort_TX_Interrupt_Disable>:
 156:	e1 ec       	ldi	r30, 0xC1	; 193
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	8f 7d       	andi	r24, 0xDF	; 223
 15e:	80 83       	st	Z, r24
 160:	08 95       	ret

00000162 <SerialPort_RX_Enable>:
 162:	e1 ec       	ldi	r30, 0xC1	; 193
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	80 61       	ori	r24, 0x10	; 16
 16a:	80 83       	st	Z, r24
 16c:	08 95       	ret

0000016e <SerialPort_RX_Interrupt_Enable>:
 16e:	e1 ec       	ldi	r30, 0xC1	; 193
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	80 68       	ori	r24, 0x80	; 128
 176:	80 83       	st	Z, r24
 178:	08 95       	ret

0000017a <SerialPort_Send_Data>:

void SerialPort_Send_Data(char data){
	UDR0 = data;
 17a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 17e:	08 95       	ret

00000180 <SGEN_TurnOn>:
//Private library methods

//turns on generator
static void SGEN_TurnOn(){
	//TO DO
	UART_PrintString("La maquina se prendio bien culiado");
 180:	83 e1       	ldi	r24, 0x13	; 19
 182:	92 e0       	ldi	r25, 0x02	; 2
 184:	0e 94 22 01 	call	0x244	; 0x244 <UART_PrintString>
 188:	08 95       	ret

0000018a <SGEN_TurnOff>:
}

//turns off generator
static void SGEN_TurnOff(){
	//TO DO
	UART_PrintString("La maquina se apago bien culiado");
 18a:	86 e3       	ldi	r24, 0x36	; 54
 18c:	92 e0       	ldi	r25, 0x02	; 2
 18e:	0e 94 22 01 	call	0x244	; 0x244 <UART_PrintString>
 192:	08 95       	ret

00000194 <SGEN_RST>:
}

//restarts program
static void SGEN_RST(){
	//TO DO
	UART_PrintString("La maquina se reseteo bien culiado");
 194:	87 e5       	ldi	r24, 0x57	; 87
 196:	92 e0       	ldi	r25, 0x02	; 2
 198:	0e 94 22 01 	call	0x244	; 0x244 <UART_PrintString>
 19c:	08 95       	ret

0000019e <SGEN_Init>:


//Function for cleaning string
static void SGEN_Cleanup(char*);

void SGEN_Init(){
 19e:	08 95       	ret

000001a0 <SGEN_Decode>:
	//Inicializar signal generator
}


uint8_t SGEN_Decode(char* command){
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	ec 01       	movw	r28, r24
	
	SGEN_Cleanup(command); //Limpio los backslash por si el usuario se confundio al escribir (ej: "OM\bN" se ve como un ON)
	
	if(strcmp(command,"ON\0") ==0){
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	71 e0       	ldi	r23, 0x01	; 1
 1aa:	0e 94 04 02 	call	0x408	; 0x408 <strcmp>
 1ae:	89 2b       	or	r24, r25
 1b0:	21 f4       	brne	.+8      	; 0x1ba <SGEN_Decode+0x1a>
		SGEN_TurnOn();
 1b2:	0e 94 c0 00 	call	0x180	; 0x180 <SGEN_TurnOn>
		SGEN_SetFreq(atoi(command));
	}
	else{
		return SGEN_ERROR;
	}
	return SGEN_SUCCESS;
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	24 c0       	rjmp	.+72     	; 0x202 <SGEN_Decode+0x62>
	SGEN_Cleanup(command); //Limpio los backslash por si el usuario se confundio al escribir (ej: "OM\bN" se ve como un ON)
	
	if(strcmp(command,"ON\0") ==0){
		SGEN_TurnOn();
	}
	else if(strcmp(command,"OFF\0") ==0) {
 1ba:	64 e0       	ldi	r22, 0x04	; 4
 1bc:	71 e0       	ldi	r23, 0x01	; 1
 1be:	ce 01       	movw	r24, r28
 1c0:	0e 94 04 02 	call	0x408	; 0x408 <strcmp>
 1c4:	89 2b       	or	r24, r25
 1c6:	21 f4       	brne	.+8      	; 0x1d0 <SGEN_Decode+0x30>
		SGEN_TurnOff();
 1c8:	0e 94 c5 00 	call	0x18a	; 0x18a <SGEN_TurnOff>
		SGEN_SetFreq(atoi(command));
	}
	else{
		return SGEN_ERROR;
	}
	return SGEN_SUCCESS;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	19 c0       	rjmp	.+50     	; 0x202 <SGEN_Decode+0x62>
		SGEN_TurnOn();
	}
	else if(strcmp(command,"OFF\0") ==0) {
		SGEN_TurnOff();
	}
	else if(strcmp(command,"RST\0") ==0){
 1d0:	69 e0       	ldi	r22, 0x09	; 9
 1d2:	71 e0       	ldi	r23, 0x01	; 1
 1d4:	ce 01       	movw	r24, r28
 1d6:	0e 94 04 02 	call	0x408	; 0x408 <strcmp>
 1da:	89 2b       	or	r24, r25
 1dc:	21 f4       	brne	.+8      	; 0x1e6 <SGEN_Decode+0x46>
		SGEN_RST();
 1de:	0e 94 ca 00 	call	0x194	; 0x194 <SGEN_RST>
		return SGEN_RESET;
 1e2:	85 e4       	ldi	r24, 0x45	; 69
 1e4:	0e c0       	rjmp	.+28     	; 0x202 <SGEN_Decode+0x62>
	}
	else if(atoi(command)>=100 && atoi(command)<=10000){
 1e6:	ce 01       	movw	r24, r28
 1e8:	0e 94 e6 01 	call	0x3cc	; 0x3cc <atoi>
 1ec:	84 36       	cpi	r24, 0x64	; 100
 1ee:	91 05       	cpc	r25, r1
 1f0:	2c f0       	brlt	.+10     	; 0x1fc <SGEN_Decode+0x5c>
 1f2:	81 31       	cpi	r24, 0x11	; 17
 1f4:	97 42       	sbci	r25, 0x27	; 39
 1f6:	24 f0       	brlt	.+8      	; 0x200 <SGEN_Decode+0x60>
		SGEN_SetFreq(atoi(command));
	}
	else{
		return SGEN_ERROR;
 1f8:	85 e3       	ldi	r24, 0x35	; 53
 1fa:	03 c0       	rjmp	.+6      	; 0x202 <SGEN_Decode+0x62>
 1fc:	85 e3       	ldi	r24, 0x35	; 53
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <SGEN_Decode+0x62>
	}
	return SGEN_SUCCESS;
 200:	80 e0       	ldi	r24, 0x00	; 0
}
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <UART_Init>:
	//nada
#endif

*/

void UART_Init(uint8_t baud_rate,uint8_t TxEnable,uint8_t RxEnable){
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	d6 2f       	mov	r29, r22
 20e:	c4 2f       	mov	r28, r20
	// config = 0x33 ==> Configuro UART 9600bps, 8 bit data, 1 stop @ F_CPU = 8MHz.
	// config = 0x25 ==> Configuro UART 9600bps, 8 bit data, 1 stop @ F_CPU = 4Hz.
	//Utilizo las funciones de la librería que encapsula el hardware
	SerialPort_Init(baud_rate);
 210:	0e 94 95 00 	call	0x12a	; 0x12a <SerialPort_Init>
	if(TxEnable){
 214:	d1 11       	cpse	r29, r1
		SerialPort_TX_Enable();
 216:	0e 94 9f 00 	call	0x13e	; 0x13e <SerialPort_TX_Enable>
	}
	if(RxEnable){
 21a:	c1 11       	cpse	r28, r1
		SerialPort_RX_Enable();
 21c:	0e 94 b1 00 	call	0x162	; 0x162 <SerialPort_RX_Enable>
	}
	SerialPort_RX_Interrupt_Enable();
 220:	0e 94 b7 00 	call	0x16e	; 0x16e <SerialPort_RX_Interrupt_Enable>
}
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <UART_Write_Char_To_Buffer>:
	//SerialPort_RX_Interrupt_Disable(); //podria deshabilitar la escritura mientras
}

void UART_Write_Char_To_Buffer(const char data)
{
	if(TXindice_escritura < TX_BUFFER_LENGTH)
 22a:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <TXindice_escritura>
 22e:	91 3e       	cpi	r25, 0xE1	; 225
 230:	40 f4       	brcc	.+16     	; 0x242 <UART_Write_Char_To_Buffer+0x18>
	{
		TX_Buffer[TXindice_escritura] = data;
 232:	e9 2f       	mov	r30, r25
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	ec 56       	subi	r30, 0x6C	; 108
 238:	fd 4f       	sbci	r31, 0xFD	; 253
 23a:	80 83       	st	Z, r24
		TXindice_escritura++;
 23c:	9f 5f       	subi	r25, 0xFF	; 255
 23e:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <TXindice_escritura>
 242:	08 95       	ret

00000244 <UART_PrintString>:
	return 0;
}
*/

void UART_PrintString( const char* STR_PTR )
{
 244:	0f 93       	push	r16
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	8c 01       	movw	r16, r24
	unsigned char i = 0;
 24c:	c0 e0       	ldi	r28, 0x00	; 0
	while(STR_PTR[i]!='\0')
 24e:	03 c0       	rjmp	.+6      	; 0x256 <UART_PrintString+0x12>
	{
		UART_Write_Char_To_Buffer(STR_PTR[i]);
 250:	0e 94 15 01 	call	0x22a	; 0x22a <UART_Write_Char_To_Buffer>
		i++;
 254:	cf 5f       	subi	r28, 0xFF	; 255
*/

void UART_PrintString( const char* STR_PTR )
{
	unsigned char i = 0;
	while(STR_PTR[i]!='\0')
 256:	f8 01       	movw	r30, r16
 258:	ec 0f       	add	r30, r28
 25a:	f1 1d       	adc	r31, r1
 25c:	80 81       	ld	r24, Z
 25e:	81 11       	cpse	r24, r1
 260:	f7 cf       	rjmp	.-18     	; 0x250 <UART_PrintString+0xc>
	{
		UART_Write_Char_To_Buffer(STR_PTR[i]);
		i++;
	}
	imprimiendoMensaje=1;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <imprimiendoMensaje>
	SerialPort_TX_Interrupt_Enable();
 268:	0e 94 a5 00 	call	0x14a	; 0x14a <SerialPort_TX_Interrupt_Enable>
	//SerialPort_RX_Interrupt_Disable(); //podria deshabilitar la escritura mientras
}
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	08 95       	ret

00000274 <UART_GetString>:
		// Write buffer is full --> TO-DO checkeo del error
		Error_code= ERROR_UART_FULL_BUFF;
	}
}

 char* UART_GetString(){
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
	 char* ret;
	strcpy(ret,RX_Buffer);
 278:	60 e8       	ldi	r22, 0x80	; 128
 27a:	72 e0       	ldi	r23, 0x02	; 2
 27c:	c0 e0       	ldi	r28, 0x00	; 0
 27e:	d0 e0       	ldi	r29, 0x00	; 0
 280:	ce 01       	movw	r24, r28
 282:	0e 94 0d 02 	call	0x41a	; 0x41a <strcpy>
	return ret;
}
 286:	ce 01       	movw	r24, r28
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <UART_HayString>:

unsigned char UART_HayString(){
	if(flag_hayString){
 28e:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <__data_end>
 292:	88 23       	and	r24, r24
 294:	19 f0       	breq	.+6      	; 0x29c <UART_HayString+0xe>
		flag_hayString=0;
 296:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <__data_end>
		return 1;
 29a:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		return 0;
	}
}
 29c:	08 95       	ret

0000029e <__vector_18>:

ISR (USART_RX_vect){
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	2f 93       	push	r18
 2aa:	3f 93       	push	r19
 2ac:	4f 93       	push	r20
 2ae:	5f 93       	push	r21
 2b0:	6f 93       	push	r22
 2b2:	7f 93       	push	r23
 2b4:	8f 93       	push	r24
 2b6:	9f 93       	push	r25
 2b8:	af 93       	push	r26
 2ba:	bf 93       	push	r27
 2bc:	ef 93       	push	r30
 2be:	ff 93       	push	r31
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	1f 92       	push	r1
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char dato=UDR0;
 2ca:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2ce:	89 83       	std	Y+1, r24	; 0x01
	if(dato!='\r'){
 2d0:	89 81       	ldd	r24, Y+1	; 0x01
 2d2:	8d 30       	cpi	r24, 0x0D	; 13
 2d4:	c9 f0       	breq	.+50     	; 0x308 <__vector_18+0x6a>
		RX_Buffer[RX_Index++%RX_BUFFER_LENGTH] = dato;
 2d6:	e0 91 75 03 	lds	r30, 0x0375	; 0x800375 <RX_Index>
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	8e 0f       	add	r24, r30
 2de:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <RX_Index>
 2e2:	8d ec       	ldi	r24, 0xCD	; 205
 2e4:	e8 9f       	mul	r30, r24
 2e6:	81 2d       	mov	r24, r1
 2e8:	11 24       	eor	r1, r1
 2ea:	82 95       	swap	r24
 2ec:	8f 70       	andi	r24, 0x0F	; 15
 2ee:	88 0f       	add	r24, r24
 2f0:	88 0f       	add	r24, r24
 2f2:	98 2f       	mov	r25, r24
 2f4:	99 0f       	add	r25, r25
 2f6:	99 0f       	add	r25, r25
 2f8:	89 0f       	add	r24, r25
 2fa:	e8 1b       	sub	r30, r24
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
 300:	e0 58       	subi	r30, 0x80	; 128
 302:	fd 4f       	sbci	r31, 0xFD	; 253
 304:	80 83       	st	Z, r24
 306:	0f c0       	rjmp	.+30     	; 0x326 <__vector_18+0x88>
		eco=1;
		SerialPort_TX_Interrupt_Enable();
		#endif
	}
	else{
		RX_Buffer[RX_Index++]='\0';
 308:	e0 91 75 03 	lds	r30, 0x0375	; 0x800375 <RX_Index>
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	e0 58       	subi	r30, 0x80	; 128
 310:	fd 4f       	sbci	r31, 0xFD	; 253
 312:	10 82       	st	Z, r1
		RX_Index=0;
 314:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <RX_Index>
		UART_PrintString("\n\r");
 318:	8a e7       	ldi	r24, 0x7A	; 122
 31a:	92 e0       	ldi	r25, 0x02	; 2
 31c:	0e 94 22 01 	call	0x244	; 0x244 <UART_PrintString>
		flag_hayString=1;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <__data_end>
	}
}
 326:	0f 90       	pop	r0
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	ff 91       	pop	r31
 32e:	ef 91       	pop	r30
 330:	bf 91       	pop	r27
 332:	af 91       	pop	r26
 334:	9f 91       	pop	r25
 336:	8f 91       	pop	r24
 338:	7f 91       	pop	r23
 33a:	6f 91       	pop	r22
 33c:	5f 91       	pop	r21
 33e:	4f 91       	pop	r20
 340:	3f 91       	pop	r19
 342:	2f 91       	pop	r18
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <__vector_19>:

ISR(USART_UDRE_vect){
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	2f 93       	push	r18
 35a:	3f 93       	push	r19
 35c:	4f 93       	push	r20
 35e:	5f 93       	push	r21
 360:	6f 93       	push	r22
 362:	7f 93       	push	r23
 364:	8f 93       	push	r24
 366:	9f 93       	push	r25
 368:	af 93       	push	r26
 36a:	bf 93       	push	r27
 36c:	ef 93       	push	r30
 36e:	ff 93       	push	r31
		SerialPort_Send_Data(RX_Buffer[(RX_Index-1)%RX_BUFFER_LENGTH]);
		eco=0;
		SerialPort_TX_Interrupt_Disable();
	}
	#endif
	if(imprimiendoMensaje){
 370:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <imprimiendoMensaje>
 374:	88 23       	and	r24, r24
 376:	c9 f0       	breq	.+50     	; 0x3aa <__vector_19+0x5c>
		if(TXindice_lectura<TXindice_escritura){
 378:	e0 91 77 03 	lds	r30, 0x0377	; 0x800377 <TXindice_lectura>
 37c:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <TXindice_escritura>
 380:	e8 17       	cp	r30, r24
 382:	58 f4       	brcc	.+22     	; 0x39a <__vector_19+0x4c>
			SerialPort_Send_Data(TX_Buffer[TXindice_lectura++]);		
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	8e 0f       	add	r24, r30
 388:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <TXindice_lectura>
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	ec 56       	subi	r30, 0x6C	; 108
 390:	fd 4f       	sbci	r31, 0xFD	; 253
 392:	80 81       	ld	r24, Z
 394:	0e 94 bd 00 	call	0x17a	; 0x17a <SerialPort_Send_Data>
 398:	08 c0       	rjmp	.+16     	; 0x3aa <__vector_19+0x5c>
		}
		else{
			//ya no tengo mas para escribir
			imprimiendoMensaje=0;
 39a:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <imprimiendoMensaje>
			TXindice_lectura=0;
 39e:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <TXindice_lectura>
			TXindice_escritura=0;
 3a2:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <TXindice_escritura>
			SerialPort_TX_Interrupt_Disable();
 3a6:	0e 94 ab 00 	call	0x156	; 0x156 <SerialPort_TX_Interrupt_Disable>
			//SerialPort_RX_Interrupt_Enable(); //podriamos deshabilitar y habilitar lectura de teclado mientras se escribe msj
		}
	}
 3aa:	ff 91       	pop	r31
 3ac:	ef 91       	pop	r30
 3ae:	bf 91       	pop	r27
 3b0:	af 91       	pop	r26
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	7f 91       	pop	r23
 3b8:	6f 91       	pop	r22
 3ba:	5f 91       	pop	r21
 3bc:	4f 91       	pop	r20
 3be:	3f 91       	pop	r19
 3c0:	2f 91       	pop	r18
 3c2:	0f 90       	pop	r0
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	0f 90       	pop	r0
 3c8:	1f 90       	pop	r1
 3ca:	18 95       	reti

000003cc <atoi>:
 3cc:	fc 01       	movw	r30, r24
 3ce:	88 27       	eor	r24, r24
 3d0:	99 27       	eor	r25, r25
 3d2:	e8 94       	clt
 3d4:	21 91       	ld	r18, Z+
 3d6:	20 32       	cpi	r18, 0x20	; 32
 3d8:	e9 f3       	breq	.-6      	; 0x3d4 <atoi+0x8>
 3da:	29 30       	cpi	r18, 0x09	; 9
 3dc:	10 f0       	brcs	.+4      	; 0x3e2 <atoi+0x16>
 3de:	2e 30       	cpi	r18, 0x0E	; 14
 3e0:	c8 f3       	brcs	.-14     	; 0x3d4 <atoi+0x8>
 3e2:	2b 32       	cpi	r18, 0x2B	; 43
 3e4:	41 f0       	breq	.+16     	; 0x3f6 <atoi+0x2a>
 3e6:	2d 32       	cpi	r18, 0x2D	; 45
 3e8:	39 f4       	brne	.+14     	; 0x3f8 <atoi+0x2c>
 3ea:	68 94       	set
 3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <atoi+0x2a>
 3ee:	0e 94 14 02 	call	0x428	; 0x428 <__mulhi_const_10>
 3f2:	82 0f       	add	r24, r18
 3f4:	91 1d       	adc	r25, r1
 3f6:	21 91       	ld	r18, Z+
 3f8:	20 53       	subi	r18, 0x30	; 48
 3fa:	2a 30       	cpi	r18, 0x0A	; 10
 3fc:	c0 f3       	brcs	.-16     	; 0x3ee <atoi+0x22>
 3fe:	1e f4       	brtc	.+6      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 400:	90 95       	com	r25
 402:	81 95       	neg	r24
 404:	9f 4f       	sbci	r25, 0xFF	; 255
 406:	08 95       	ret

00000408 <strcmp>:
 408:	fb 01       	movw	r30, r22
 40a:	dc 01       	movw	r26, r24
 40c:	8d 91       	ld	r24, X+
 40e:	01 90       	ld	r0, Z+
 410:	80 19       	sub	r24, r0
 412:	01 10       	cpse	r0, r1
 414:	d9 f3       	breq	.-10     	; 0x40c <strcmp+0x4>
 416:	99 0b       	sbc	r25, r25
 418:	08 95       	ret

0000041a <strcpy>:
 41a:	fb 01       	movw	r30, r22
 41c:	dc 01       	movw	r26, r24
 41e:	01 90       	ld	r0, Z+
 420:	0d 92       	st	X+, r0
 422:	00 20       	and	r0, r0
 424:	e1 f7       	brne	.-8      	; 0x41e <strcpy+0x4>
 426:	08 95       	ret

00000428 <__mulhi_const_10>:
 428:	7a e0       	ldi	r23, 0x0A	; 10
 42a:	97 9f       	mul	r25, r23
 42c:	90 2d       	mov	r25, r0
 42e:	87 9f       	mul	r24, r23
 430:	80 2d       	mov	r24, r0
 432:	91 0d       	add	r25, r1
 434:	11 24       	eor	r1, r1
 436:	08 95       	ret

00000438 <_exit>:
 438:	f8 94       	cli

0000043a <__stop_program>:
 43a:	ff cf       	rjmp	.-2      	; 0x43a <__stop_program>
