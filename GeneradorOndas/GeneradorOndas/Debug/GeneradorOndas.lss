
GeneradorOndas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800100  0000080c  000008a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000080c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000114  0080020e  0080020e  000009ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000123c  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aac  00000000  00000000  00001ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000098a  00000000  00000000  00002888  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  00003214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007dc  00000000  00000000  000035b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006eb  00000000  00000000  00003d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00004477  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_18>
  4c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 32       	cpi	r26, 0x22	; 34
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 04 04 	jmp	0x808	; 0x808 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 */ 


#include "main.h"
int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	c3 50       	subi	r28, 0x03	; 3
  b0:	d1 40       	sbci	r29, 0x01	; 1
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	cd bf       	out	0x3d, r28	; 61
    char welcomeMsj[] = "Bienvenidx al generador de señales digitales programable\r Por favor, ingrese una frecuencia entre 100 y 10000Hz o un comando\r ON: encender generador(frecuencia por defecto: 100Hz), OFF: apagar generador, RST: reiniciar \r\n";
  bc:	8e ed       	ldi	r24, 0xDE	; 222
  be:	e0 e0       	ldi	r30, 0x00	; 0
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	de 01       	movw	r26, r28
  c4:	11 96       	adiw	r26, 0x01	; 1
  c6:	01 90       	ld	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	8a 95       	dec	r24
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x20>
	char errorMsj[] = "Lo siento, el comando no es valido\r\n";
  ce:	85 e2       	ldi	r24, 0x25	; 37
  d0:	ee ed       	ldi	r30, 0xDE	; 222
  d2:	f1 e0       	ldi	r31, 0x01	; 1
  d4:	de 01       	movw	r26, r28
  d6:	a1 52       	subi	r26, 0x21	; 33
  d8:	bf 4f       	sbci	r27, 0xFF	; 255
  da:	01 90       	ld	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	8a 95       	dec	r24
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x34>
	unsigned char command = 0;
	
	UART_Init(BAUD_RATE,1,1); //inicializo la uart
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	87 e6       	ldi	r24, 0x67	; 103
  e8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <UART_Init>
	SGEN_Init(); //inicializo generadora de señales
  ec:	0e 94 ef 00 	call	0x1de	; 0x1de <SGEN_Init>
	sei();
  f0:	78 94       	sei
	
	UART_PrintString(welcomeMsj); //Imprimo mensaje de bienvenida
  f2:	ce 01       	movw	r24, r28
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <UART_PrintString>
	
    while (1) 
    {
		if(UART_HayString()){ //flag de la UART de \r
  fa:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_HayString>
  fe:	88 23       	and	r24, r24
 100:	e1 f3       	breq	.-8      	; 0xfa <main+0x54>
			command = SGEN_Decode(UART_GetString()); //returns number of error
 102:	0e 94 96 01 	call	0x32c	; 0x32c <UART_GetString>
 106:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SGEN_Decode>
			//Comportamiento si dio error o se reinicio
			if(command==SGEN_SUCCESS){
 10a:	88 23       	and	r24, r24
 10c:	b1 f3       	breq	.-20     	; 0xfa <main+0x54>
				continue;
			}
			else if(command==SGEN_ERROR){
 10e:	85 34       	cpi	r24, 0x45	; 69
 110:	31 f4       	brne	.+12     	; 0x11e <main+0x78>
				UART_PrintString(errorMsj);
 112:	ce 01       	movw	r24, r28
 114:	81 52       	subi	r24, 0x21	; 33
 116:	9f 4f       	sbci	r25, 0xFF	; 255
 118:	0e 94 7e 01 	call	0x2fc	; 0x2fc <UART_PrintString>
 11c:	ee cf       	rjmp	.-36     	; 0xfa <main+0x54>
				//print error msj
				command=SGEN_SUCCESS;
			}
			else if (command==SGEN_RESET){
 11e:	8a 32       	cpi	r24, 0x2A	; 42
 120:	61 f7       	brne	.-40     	; 0xfa <main+0x54>
				UART_PrintString(welcomeMsj);
 122:	ce 01       	movw	r24, r28
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	0e 94 7e 01 	call	0x2fc	; 0x2fc <UART_PrintString>
 12a:	e7 cf       	rjmp	.-50     	; 0xfa <main+0x54>

0000012c <SerialPort_Init>:

// Espera hasta que el buffer de RX este completo.
void SerialPort_Wait_Until_New_Data(void){
	// Pooling - Bloqueante, puede durar indefinidamente!
	while(!(UCSR0A & (1<<RXC0)));
}
 12c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 130:	96 e0       	ldi	r25, 0x06	; 6
 132:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 136:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 13a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 13e:	08 95       	ret

00000140 <SerialPort_TX_Enable>:
 140:	e1 ec       	ldi	r30, 0xC1	; 193
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	88 60       	ori	r24, 0x08	; 8
 148:	80 83       	st	Z, r24
 14a:	08 95       	ret

0000014c <SerialPort_TX_Interrupt_Enable>:
 14c:	e1 ec       	ldi	r30, 0xC1	; 193
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	80 62       	ori	r24, 0x20	; 32
 154:	80 83       	st	Z, r24
 156:	08 95       	ret

00000158 <SerialPort_TX_Interrupt_Disable>:
 158:	e1 ec       	ldi	r30, 0xC1	; 193
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	8f 7d       	andi	r24, 0xDF	; 223
 160:	80 83       	st	Z, r24
 162:	08 95       	ret

00000164 <SerialPort_RX_Enable>:
 164:	e1 ec       	ldi	r30, 0xC1	; 193
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	80 83       	st	Z, r24
 16e:	08 95       	ret

00000170 <SerialPort_RX_Interrupt_Enable>:
 170:	e1 ec       	ldi	r30, 0xC1	; 193
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	80 68       	ori	r24, 0x80	; 128
 178:	80 83       	st	Z, r24
 17a:	08 95       	ret

0000017c <SerialPort_Send_Data>:
 17c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 180:	08 95       	ret

00000182 <SerialPort_Recive_Data>:


char SerialPort_Recive_Data(void){
	return UDR0;
 182:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 186:	08 95       	ret

00000188 <SGEN_SetFreq>:
}

//sets the frequency
static void SGEN_SetFreq(uint16_t frequency){
	frq = frequency;
	TIMERCONFIG_SetTopOnCTC((uint16_t)((float)SGEN_BASE_FREQ/frq) + 0.5 - 1); //seteo el OCR1A fancy
 188:	bc 01       	movw	r22, r24
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 40 03 	call	0x680	; 0x680 <__floatunsisf>
 192:	9b 01       	movw	r18, r22
 194:	ac 01       	movw	r20, r24
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	74 e2       	ldi	r23, 0x24	; 36
 19a:	84 e7       	ldi	r24, 0x74	; 116
 19c:	99 e4       	ldi	r25, 0x49	; 73
 19e:	0e 94 9f 02 	call	0x53e	; 0x53e <__divsf3>
 1a2:	0e 94 11 03 	call	0x622	; 0x622 <__fixunssfsi>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 40 03 	call	0x680	; 0x680 <__floatunsisf>
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	5f e3       	ldi	r21, 0x3F	; 63
 1b6:	0e 94 33 02 	call	0x466	; 0x466 <__addsf3>
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	40 e8       	ldi	r20, 0x80	; 128
 1c0:	5f e3       	ldi	r21, 0x3F	; 63
 1c2:	0e 94 32 02 	call	0x464	; 0x464 <__subsf3>
 1c6:	0e 94 11 03 	call	0x622	; 0x622 <__fixunssfsi>
 1ca:	cb 01       	movw	r24, r22
 1cc:	0e 94 4b 01 	call	0x296	; 0x296 <TIMERCONFIG_SetTopOnCTC>
 1d0:	08 95       	ret

000001d2 <SGEN_TurnOn>:
//Private library methods

//turns on generator
static void SGEN_TurnOn(){
	//UART_PrintString("La maquina se prendio bien");
	TIMERCONFIG_ActivateToggle(); //activo el toggle
 1d2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <TIMERCONFIG_ActivateToggle>
 1d6:	08 95       	ret

000001d8 <SGEN_TurnOff>:
}

//turns off generator
static void SGEN_TurnOff(){
	//UART_PrintString("La maquina se apago bien");
	TIMERCONFIG_DeactivateToggle();
 1d8:	0e 94 56 01 	call	0x2ac	; 0x2ac <TIMERCONFIG_DeactivateToggle>
 1dc:	08 95       	ret

000001de <SGEN_Init>:

void SGEN_Init(){
	//Inicializar signal generator
	
	//Inicializo timer
	TIMERCONFIG_Init(TIMERCONFIG_CTC,TIMERCONFIG_PRESCALER_8); //inicializo timer en modo ctc y con preescalador N=8
 1de:	68 e0       	ldi	r22, 0x08	; 8
 1e0:	84 e0       	ldi	r24, 0x04	; 4
 1e2:	0e 94 34 01 	call	0x268	; 0x268 <TIMERCONFIG_Init>
	SGEN_SetFreq(100); //seteo la frecuencia inicial
 1e6:	84 e6       	ldi	r24, 0x64	; 100
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 c4 00 	call	0x188	; 0x188 <SGEN_SetFreq>
 1ee:	08 95       	ret

000001f0 <SGEN_RST>:
}

//restarts program
static void SGEN_RST(){
	//UART_PrintString("La maquina se reseteo bien");
	SGEN_Init();
 1f0:	0e 94 ef 00 	call	0x1de	; 0x1de <SGEN_Init>
	SGEN_TurnOff();	
 1f4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SGEN_TurnOff>
 1f8:	08 95       	ret

000001fa <SGEN_Decode>:
	SGEN_SetFreq(100); //seteo la frecuencia inicial
	//SGEN_TurnOff();
}


uint8_t SGEN_Decode(char* command){
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	ec 01       	movw	r28, r24
	
	if(strcmp(command,"ON")==0){
 200:	63 e0       	ldi	r22, 0x03	; 3
 202:	72 e0       	ldi	r23, 0x02	; 2
 204:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <strcmp>
 208:	89 2b       	or	r24, r25
 20a:	21 f4       	brne	.+8      	; 0x214 <SGEN_Decode+0x1a>
		SGEN_TurnOn();
 20c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <SGEN_TurnOn>
		SGEN_SetFreq(atoi(command));
	}
	else{
		return SGEN_ERROR;
	}
	return SGEN_SUCCESS;
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	27 c0       	rjmp	.+78     	; 0x262 <SGEN_Decode+0x68>
uint8_t SGEN_Decode(char* command){
	
	if(strcmp(command,"ON")==0){
		SGEN_TurnOn();
	}
	else if(strcmp(command,"OFF")==0) {
 214:	66 e0       	ldi	r22, 0x06	; 6
 216:	72 e0       	ldi	r23, 0x02	; 2
 218:	ce 01       	movw	r24, r28
 21a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <strcmp>
 21e:	89 2b       	or	r24, r25
 220:	21 f4       	brne	.+8      	; 0x22a <SGEN_Decode+0x30>
		SGEN_TurnOff();
 222:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SGEN_TurnOff>
		SGEN_SetFreq(atoi(command));
	}
	else{
		return SGEN_ERROR;
	}
	return SGEN_SUCCESS;
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	1c c0       	rjmp	.+56     	; 0x262 <SGEN_Decode+0x68>
		SGEN_TurnOn();
	}
	else if(strcmp(command,"OFF")==0) {
		SGEN_TurnOff();
	}
	else if(strcmp(command,"RST")==0){
 22a:	6a e0       	ldi	r22, 0x0A	; 10
 22c:	72 e0       	ldi	r23, 0x02	; 2
 22e:	ce 01       	movw	r24, r28
 230:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <strcmp>
 234:	89 2b       	or	r24, r25
 236:	21 f4       	brne	.+8      	; 0x240 <SGEN_Decode+0x46>
		SGEN_RST();
 238:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SGEN_RST>
		return SGEN_RESET;
 23c:	8a e2       	ldi	r24, 0x2A	; 42
 23e:	11 c0       	rjmp	.+34     	; 0x262 <SGEN_Decode+0x68>
	}
	else if(atoi(command)>=100 && atoi(command)<=10000){
 240:	ce 01       	movw	r24, r28
 242:	0e 94 ce 03 	call	0x79c	; 0x79c <atoi>
 246:	84 36       	cpi	r24, 0x64	; 100
 248:	91 05       	cpc	r25, r1
 24a:	44 f0       	brlt	.+16     	; 0x25c <SGEN_Decode+0x62>
 24c:	81 31       	cpi	r24, 0x11	; 17
 24e:	27 e2       	ldi	r18, 0x27	; 39
 250:	92 07       	cpc	r25, r18
 252:	34 f4       	brge	.+12     	; 0x260 <SGEN_Decode+0x66>
		SGEN_SetFreq(atoi(command));
 254:	0e 94 c4 00 	call	0x188	; 0x188 <SGEN_SetFreq>
	}
	else{
		return SGEN_ERROR;
	}
	return SGEN_SUCCESS;
 258:	80 e0       	ldi	r24, 0x00	; 0
	else if(strcmp(command,"RST")==0){
		SGEN_RST();
		return SGEN_RESET;
	}
	else if(atoi(command)>=100 && atoi(command)<=10000){
		SGEN_SetFreq(atoi(command));
 25a:	03 c0       	rjmp	.+6      	; 0x262 <SGEN_Decode+0x68>
	}
	else{
		return SGEN_ERROR;
 25c:	85 e4       	ldi	r24, 0x45	; 69
 25e:	01 c0       	rjmp	.+2      	; 0x262 <SGEN_Decode+0x68>
 260:	85 e4       	ldi	r24, 0x45	; 69
	}
	return SGEN_SUCCESS;
}
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <TIMERCONFIG_Init>:



void TIMERCONFIG_Init(uint8_t mode, uint8_t prescaler){
	
	DDRB = (1<<PORTB1); //Configuro el puerto PB1 como salida
 268:	92 e0       	ldi	r25, 0x02	; 2
 26a:	94 b9       	out	0x04, r25	; 4
	switch(mode)
 26c:	84 30       	cpi	r24, 0x04	; 4
 26e:	29 f4       	brne	.+10     	; 0x27a <TIMERCONFIG_Init+0x12>
	{
		case TIMERCONFIG_CTC:
			TCCR1B |= (1<<WGM12);
 270:	e1 e8       	ldi	r30, 0x81	; 129
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	88 60       	ori	r24, 0x08	; 8
 278:	80 83       	st	Z, r24
			break;
		default:
			break; //normal mode
	}
	switch(prescaler)
 27a:	68 30       	cpi	r22, 0x08	; 8
 27c:	29 f4       	brne	.+10     	; 0x288 <TIMERCONFIG_Init+0x20>
	{
		case TIMERCONFIG_PRESCALER_8:
			TCCR1B |= (1<<CS11);
 27e:	e1 e8       	ldi	r30, 0x81	; 129
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	82 60       	ori	r24, 0x02	; 2
 286:	80 83       	st	Z, r24
			break;
		default:
			break; //deactivate timer1
	}
	OCR1A=BASE_FREQ; //La librería setea el registro OCR1A base
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	9f ef       	ldi	r25, 0xFF	; 255
 28c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 290:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 294:	08 95       	ret

00000296 <TIMERCONFIG_SetTopOnCTC>:
}

void TIMERCONFIG_SetTopOnCTC(uint16_t value){
	OCR1A = value;
 296:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 29a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 29e:	08 95       	ret

000002a0 <TIMERCONFIG_ActivateToggle>:
}

void TIMERCONFIG_ActivateToggle(){
	TCCR1A |= (1<<COM1A0); //Activo toggle de OC1A
 2a0:	e0 e8       	ldi	r30, 0x80	; 128
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	80 64       	ori	r24, 0x40	; 64
 2a8:	80 83       	st	Z, r24
 2aa:	08 95       	ret

000002ac <TIMERCONFIG_DeactivateToggle>:
}
void TIMERCONFIG_DeactivateToggle(){
	TCCR1A &= ~(1<<COM1A0); //Desactivo toggle de OC1A
 2ac:	e0 e8       	ldi	r30, 0x80	; 128
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	8f 7b       	andi	r24, 0xBF	; 191
 2b4:	80 83       	st	Z, r24
 2b6:	08 95       	ret

000002b8 <UART_Init>:
	return RX_Buf_Cpy; //envio la copia del buffer
}

unsigned char UART_Error_Full_Buffer(){
	return Error_code == ERROR_UART_FULL_BUFF;
}
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	d6 2f       	mov	r29, r22
 2be:	c4 2f       	mov	r28, r20
 2c0:	0e 94 96 00 	call	0x12c	; 0x12c <SerialPort_Init>
 2c4:	d1 11       	cpse	r29, r1
 2c6:	0e 94 a0 00 	call	0x140	; 0x140 <SerialPort_TX_Enable>
 2ca:	cc 23       	and	r28, r28
 2cc:	21 f0       	breq	.+8      	; 0x2d6 <UART_Init+0x1e>
 2ce:	0e 94 b2 00 	call	0x164	; 0x164 <SerialPort_RX_Enable>
 2d2:	0e 94 b8 00 	call	0x170	; 0x170 <SerialPort_RX_Interrupt_Enable>
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <UART_Write_Char_To_Buffer>:
 2dc:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <TXindice_escritura>
 2e0:	96 3e       	cpi	r25, 0xE6	; 230
 2e2:	48 f4       	brcc	.+18     	; 0x2f6 <UART_Write_Char_To_Buffer+0x1a>
 2e4:	e9 2f       	mov	r30, r25
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	e7 5c       	subi	r30, 0xC7	; 199
 2ea:	fd 4f       	sbci	r31, 0xFD	; 253
 2ec:	80 83       	st	Z, r24
 2ee:	9f 5f       	subi	r25, 0xFF	; 255
 2f0:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <TXindice_escritura>
 2f4:	08 95       	ret
 2f6:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <__data_end>
 2fa:	08 95       	ret

000002fc <UART_PrintString>:
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	8c 01       	movw	r16, r24
 304:	c0 e0       	ldi	r28, 0x00	; 0
 306:	03 c0       	rjmp	.+6      	; 0x30e <UART_PrintString+0x12>
 308:	0e 94 6e 01 	call	0x2dc	; 0x2dc <UART_Write_Char_To_Buffer>
 30c:	cf 5f       	subi	r28, 0xFF	; 255
 30e:	f8 01       	movw	r30, r16
 310:	ec 0f       	add	r30, r28
 312:	f1 1d       	adc	r31, r1
 314:	80 81       	ld	r24, Z
 316:	81 11       	cpse	r24, r1
 318:	f7 cf       	rjmp	.-18     	; 0x308 <UART_PrintString+0xc>
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <imprimiendoMensaje>
 320:	0e 94 a6 00 	call	0x14c	; 0x14c <SerialPort_TX_Interrupt_Enable>
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	08 95       	ret

0000032c <UART_GetString>:
 32c:	65 e2       	ldi	r22, 0x25	; 37
 32e:	72 e0       	ldi	r23, 0x02	; 2
 330:	81 e1       	ldi	r24, 0x11	; 17
 332:	92 e0       	ldi	r25, 0x02	; 2
 334:	0e 94 f5 03 	call	0x7ea	; 0x7ea <strcpy>
 338:	81 e1       	ldi	r24, 0x11	; 17
 33a:	92 e0       	ldi	r25, 0x02	; 2
 33c:	08 95       	ret

0000033e <UART_HayString>:

unsigned char UART_HayString(){
	if(flag_hayString){
 33e:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <flag_hayString>
 342:	88 23       	and	r24, r24
 344:	19 f0       	breq	.+6      	; 0x34c <UART_HayString+0xe>
		flag_hayString=0;
 346:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <flag_hayString>
		return 1;
 34a:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		return 0;
	}
}
 34c:	08 95       	ret

0000034e <__vector_18>:

ISR (USART_RX_vect){
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	2f 93       	push	r18
 35a:	3f 93       	push	r19
 35c:	4f 93       	push	r20
 35e:	5f 93       	push	r21
 360:	6f 93       	push	r22
 362:	7f 93       	push	r23
 364:	8f 93       	push	r24
 366:	9f 93       	push	r25
 368:	af 93       	push	r26
 36a:	bf 93       	push	r27
 36c:	ef 93       	push	r30
 36e:	ff 93       	push	r31
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	1f 92       	push	r1
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char dato=SerialPort_Recive_Data();
 37a:	0e 94 c1 00 	call	0x182	; 0x182 <SerialPort_Recive_Data>
 37e:	89 83       	std	Y+1, r24	; 0x01
	if(dato!='\r'){
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	8d 30       	cpi	r24, 0x0D	; 13
 384:	71 f0       	breq	.+28     	; 0x3a2 <__vector_18+0x54>
		if(RX_Index<RX_BUFFER_LENGTH-1){
 386:	e0 91 1f 03 	lds	r30, 0x031F	; 0x80031f <RX_Index>
 38a:	e3 31       	cpi	r30, 0x13	; 19
 38c:	a8 f4       	brcc	.+42     	; 0x3b8 <__vector_18+0x6a>
			RX_Buffer[RX_Index++] = dato;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	8e 0f       	add	r24, r30
 392:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <RX_Index>
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	89 81       	ldd	r24, Y+1	; 0x01
 39a:	eb 5d       	subi	r30, 0xDB	; 219
 39c:	fd 4f       	sbci	r31, 0xFD	; 253
 39e:	80 83       	st	Z, r24
 3a0:	0b c0       	rjmp	.+22     	; 0x3b8 <__vector_18+0x6a>
			SerialPort_TX_Interrupt_Enable();
			#endif	
		}
	}
	else{
		RX_Buffer[RX_Index++]='\0';
 3a2:	e0 91 1f 03 	lds	r30, 0x031F	; 0x80031f <RX_Index>
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	eb 5d       	subi	r30, 0xDB	; 219
 3aa:	fd 4f       	sbci	r31, 0xFD	; 253
 3ac:	10 82       	st	Z, r1
		RX_Index=0;
 3ae:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <RX_Index>
		#ifdef ECO_DEBUG
		UART_PrintString("\n\r");
		#endif
		flag_hayString=1;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <flag_hayString>
	}
}
 3b8:	0f 90       	pop	r0
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	ff 91       	pop	r31
 3c0:	ef 91       	pop	r30
 3c2:	bf 91       	pop	r27
 3c4:	af 91       	pop	r26
 3c6:	9f 91       	pop	r25
 3c8:	8f 91       	pop	r24
 3ca:	7f 91       	pop	r23
 3cc:	6f 91       	pop	r22
 3ce:	5f 91       	pop	r21
 3d0:	4f 91       	pop	r20
 3d2:	3f 91       	pop	r19
 3d4:	2f 91       	pop	r18
 3d6:	0f 90       	pop	r0
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	0f 90       	pop	r0
 3dc:	1f 90       	pop	r1
 3de:	18 95       	reti

000003e0 <__vector_19>:

ISR(USART_UDRE_vect){
 3e0:	1f 92       	push	r1
 3e2:	0f 92       	push	r0
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	0f 92       	push	r0
 3e8:	11 24       	eor	r1, r1
 3ea:	2f 93       	push	r18
 3ec:	3f 93       	push	r19
 3ee:	4f 93       	push	r20
 3f0:	5f 93       	push	r21
 3f2:	6f 93       	push	r22
 3f4:	7f 93       	push	r23
 3f6:	8f 93       	push	r24
 3f8:	9f 93       	push	r25
 3fa:	af 93       	push	r26
 3fc:	bf 93       	push	r27
 3fe:	ef 93       	push	r30
 400:	ff 93       	push	r31
		SerialPort_Send_Data(RX_Buffer[(RX_Index-1)]);
		eco=0;
		SerialPort_TX_Interrupt_Disable();
	}
	#endif
	if(imprimiendoMensaje){
 402:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <imprimiendoMensaje>
 406:	88 23       	and	r24, r24
 408:	e1 f0       	breq	.+56     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
		if(TXindice_lectura<TXindice_escritura){
 40a:	e0 91 21 03 	lds	r30, 0x0321	; 0x800321 <TXindice_lectura>
 40e:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <TXindice_escritura>
 412:	e8 17       	cp	r30, r24
 414:	58 f4       	brcc	.+22     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			SerialPort_Send_Data(TX_Buffer[TXindice_lectura++]);		
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	8e 0f       	add	r24, r30
 41a:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <TXindice_lectura>
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	e7 5c       	subi	r30, 0xC7	; 199
 422:	fd 4f       	sbci	r31, 0xFD	; 253
 424:	80 81       	ld	r24, Z
 426:	0e 94 be 00 	call	0x17c	; 0x17c <SerialPort_Send_Data>
 42a:	0b c0       	rjmp	.+22     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
		}
		else{
			//ya no tengo mas para escribir
			imprimiendoMensaje=0;
 42c:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <imprimiendoMensaje>
			TXindice_lectura=0;
 430:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <TXindice_lectura>
			TXindice_escritura=0;
 434:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <TXindice_escritura>
			Error_code = ERROR_UART_NONE; //al reiniciarse el buffer ya no hay errores (igual no manejamos esto)
 438:	82 e0       	ldi	r24, 0x02	; 2
 43a:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <__data_end>
			SerialPort_TX_Interrupt_Disable();
 43e:	0e 94 ac 00 	call	0x158	; 0x158 <SerialPort_TX_Interrupt_Disable>
			//SerialPort_RX_Interrupt_Enable(); //podriamos deshabilitar y habilitar lectura de teclado mientras se escribe msj
		}
	}
 442:	ff 91       	pop	r31
 444:	ef 91       	pop	r30
 446:	bf 91       	pop	r27
 448:	af 91       	pop	r26
 44a:	9f 91       	pop	r25
 44c:	8f 91       	pop	r24
 44e:	7f 91       	pop	r23
 450:	6f 91       	pop	r22
 452:	5f 91       	pop	r21
 454:	4f 91       	pop	r20
 456:	3f 91       	pop	r19
 458:	2f 91       	pop	r18
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <__subsf3>:
 464:	50 58       	subi	r21, 0x80	; 128

00000466 <__addsf3>:
 466:	bb 27       	eor	r27, r27
 468:	aa 27       	eor	r26, r26
 46a:	0e 94 4a 02 	call	0x494	; 0x494 <__addsf3x>
 46e:	0c 94 94 03 	jmp	0x728	; 0x728 <__fp_round>
 472:	0e 94 86 03 	call	0x70c	; 0x70c <__fp_pscA>
 476:	38 f0       	brcs	.+14     	; 0x486 <__addsf3+0x20>
 478:	0e 94 8d 03 	call	0x71a	; 0x71a <__fp_pscB>
 47c:	20 f0       	brcs	.+8      	; 0x486 <__addsf3+0x20>
 47e:	39 f4       	brne	.+14     	; 0x48e <__addsf3+0x28>
 480:	9f 3f       	cpi	r25, 0xFF	; 255
 482:	19 f4       	brne	.+6      	; 0x48a <__addsf3+0x24>
 484:	26 f4       	brtc	.+8      	; 0x48e <__addsf3+0x28>
 486:	0c 94 83 03 	jmp	0x706	; 0x706 <__fp_nan>
 48a:	0e f4       	brtc	.+2      	; 0x48e <__addsf3+0x28>
 48c:	e0 95       	com	r30
 48e:	e7 fb       	bst	r30, 7
 490:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__fp_inf>

00000494 <__addsf3x>:
 494:	e9 2f       	mov	r30, r25
 496:	0e 94 a5 03 	call	0x74a	; 0x74a <__fp_split3>
 49a:	58 f3       	brcs	.-42     	; 0x472 <__addsf3+0xc>
 49c:	ba 17       	cp	r27, r26
 49e:	62 07       	cpc	r22, r18
 4a0:	73 07       	cpc	r23, r19
 4a2:	84 07       	cpc	r24, r20
 4a4:	95 07       	cpc	r25, r21
 4a6:	20 f0       	brcs	.+8      	; 0x4b0 <__addsf3x+0x1c>
 4a8:	79 f4       	brne	.+30     	; 0x4c8 <__addsf3x+0x34>
 4aa:	a6 f5       	brtc	.+104    	; 0x514 <__addsf3x+0x80>
 4ac:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__fp_zero>
 4b0:	0e f4       	brtc	.+2      	; 0x4b4 <__addsf3x+0x20>
 4b2:	e0 95       	com	r30
 4b4:	0b 2e       	mov	r0, r27
 4b6:	ba 2f       	mov	r27, r26
 4b8:	a0 2d       	mov	r26, r0
 4ba:	0b 01       	movw	r0, r22
 4bc:	b9 01       	movw	r22, r18
 4be:	90 01       	movw	r18, r0
 4c0:	0c 01       	movw	r0, r24
 4c2:	ca 01       	movw	r24, r20
 4c4:	a0 01       	movw	r20, r0
 4c6:	11 24       	eor	r1, r1
 4c8:	ff 27       	eor	r31, r31
 4ca:	59 1b       	sub	r21, r25
 4cc:	99 f0       	breq	.+38     	; 0x4f4 <__addsf3x+0x60>
 4ce:	59 3f       	cpi	r21, 0xF9	; 249
 4d0:	50 f4       	brcc	.+20     	; 0x4e6 <__addsf3x+0x52>
 4d2:	50 3e       	cpi	r21, 0xE0	; 224
 4d4:	68 f1       	brcs	.+90     	; 0x530 <__addsf3x+0x9c>
 4d6:	1a 16       	cp	r1, r26
 4d8:	f0 40       	sbci	r31, 0x00	; 0
 4da:	a2 2f       	mov	r26, r18
 4dc:	23 2f       	mov	r18, r19
 4de:	34 2f       	mov	r19, r20
 4e0:	44 27       	eor	r20, r20
 4e2:	58 5f       	subi	r21, 0xF8	; 248
 4e4:	f3 cf       	rjmp	.-26     	; 0x4cc <__addsf3x+0x38>
 4e6:	46 95       	lsr	r20
 4e8:	37 95       	ror	r19
 4ea:	27 95       	ror	r18
 4ec:	a7 95       	ror	r26
 4ee:	f0 40       	sbci	r31, 0x00	; 0
 4f0:	53 95       	inc	r21
 4f2:	c9 f7       	brne	.-14     	; 0x4e6 <__addsf3x+0x52>
 4f4:	7e f4       	brtc	.+30     	; 0x514 <__addsf3x+0x80>
 4f6:	1f 16       	cp	r1, r31
 4f8:	ba 0b       	sbc	r27, r26
 4fa:	62 0b       	sbc	r22, r18
 4fc:	73 0b       	sbc	r23, r19
 4fe:	84 0b       	sbc	r24, r20
 500:	ba f0       	brmi	.+46     	; 0x530 <__addsf3x+0x9c>
 502:	91 50       	subi	r25, 0x01	; 1
 504:	a1 f0       	breq	.+40     	; 0x52e <__addsf3x+0x9a>
 506:	ff 0f       	add	r31, r31
 508:	bb 1f       	adc	r27, r27
 50a:	66 1f       	adc	r22, r22
 50c:	77 1f       	adc	r23, r23
 50e:	88 1f       	adc	r24, r24
 510:	c2 f7       	brpl	.-16     	; 0x502 <__addsf3x+0x6e>
 512:	0e c0       	rjmp	.+28     	; 0x530 <__addsf3x+0x9c>
 514:	ba 0f       	add	r27, r26
 516:	62 1f       	adc	r22, r18
 518:	73 1f       	adc	r23, r19
 51a:	84 1f       	adc	r24, r20
 51c:	48 f4       	brcc	.+18     	; 0x530 <__addsf3x+0x9c>
 51e:	87 95       	ror	r24
 520:	77 95       	ror	r23
 522:	67 95       	ror	r22
 524:	b7 95       	ror	r27
 526:	f7 95       	ror	r31
 528:	9e 3f       	cpi	r25, 0xFE	; 254
 52a:	08 f0       	brcs	.+2      	; 0x52e <__addsf3x+0x9a>
 52c:	b0 cf       	rjmp	.-160    	; 0x48e <__addsf3+0x28>
 52e:	93 95       	inc	r25
 530:	88 0f       	add	r24, r24
 532:	08 f0       	brcs	.+2      	; 0x536 <__addsf3x+0xa2>
 534:	99 27       	eor	r25, r25
 536:	ee 0f       	add	r30, r30
 538:	97 95       	ror	r25
 53a:	87 95       	ror	r24
 53c:	08 95       	ret

0000053e <__divsf3>:
 53e:	0e 94 b3 02 	call	0x566	; 0x566 <__divsf3x>
 542:	0c 94 94 03 	jmp	0x728	; 0x728 <__fp_round>
 546:	0e 94 8d 03 	call	0x71a	; 0x71a <__fp_pscB>
 54a:	58 f0       	brcs	.+22     	; 0x562 <__divsf3+0x24>
 54c:	0e 94 86 03 	call	0x70c	; 0x70c <__fp_pscA>
 550:	40 f0       	brcs	.+16     	; 0x562 <__divsf3+0x24>
 552:	29 f4       	brne	.+10     	; 0x55e <__divsf3+0x20>
 554:	5f 3f       	cpi	r21, 0xFF	; 255
 556:	29 f0       	breq	.+10     	; 0x562 <__divsf3+0x24>
 558:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__fp_inf>
 55c:	51 11       	cpse	r21, r1
 55e:	0c 94 c8 03 	jmp	0x790	; 0x790 <__fp_szero>
 562:	0c 94 83 03 	jmp	0x706	; 0x706 <__fp_nan>

00000566 <__divsf3x>:
 566:	0e 94 a5 03 	call	0x74a	; 0x74a <__fp_split3>
 56a:	68 f3       	brcs	.-38     	; 0x546 <__divsf3+0x8>

0000056c <__divsf3_pse>:
 56c:	99 23       	and	r25, r25
 56e:	b1 f3       	breq	.-20     	; 0x55c <__divsf3+0x1e>
 570:	55 23       	and	r21, r21
 572:	91 f3       	breq	.-28     	; 0x558 <__divsf3+0x1a>
 574:	95 1b       	sub	r25, r21
 576:	55 0b       	sbc	r21, r21
 578:	bb 27       	eor	r27, r27
 57a:	aa 27       	eor	r26, r26
 57c:	62 17       	cp	r22, r18
 57e:	73 07       	cpc	r23, r19
 580:	84 07       	cpc	r24, r20
 582:	38 f0       	brcs	.+14     	; 0x592 <__divsf3_pse+0x26>
 584:	9f 5f       	subi	r25, 0xFF	; 255
 586:	5f 4f       	sbci	r21, 0xFF	; 255
 588:	22 0f       	add	r18, r18
 58a:	33 1f       	adc	r19, r19
 58c:	44 1f       	adc	r20, r20
 58e:	aa 1f       	adc	r26, r26
 590:	a9 f3       	breq	.-22     	; 0x57c <__divsf3_pse+0x10>
 592:	35 d0       	rcall	.+106    	; 0x5fe <__divsf3_pse+0x92>
 594:	0e 2e       	mov	r0, r30
 596:	3a f0       	brmi	.+14     	; 0x5a6 <__divsf3_pse+0x3a>
 598:	e0 e8       	ldi	r30, 0x80	; 128
 59a:	32 d0       	rcall	.+100    	; 0x600 <__divsf3_pse+0x94>
 59c:	91 50       	subi	r25, 0x01	; 1
 59e:	50 40       	sbci	r21, 0x00	; 0
 5a0:	e6 95       	lsr	r30
 5a2:	00 1c       	adc	r0, r0
 5a4:	ca f7       	brpl	.-14     	; 0x598 <__divsf3_pse+0x2c>
 5a6:	2b d0       	rcall	.+86     	; 0x5fe <__divsf3_pse+0x92>
 5a8:	fe 2f       	mov	r31, r30
 5aa:	29 d0       	rcall	.+82     	; 0x5fe <__divsf3_pse+0x92>
 5ac:	66 0f       	add	r22, r22
 5ae:	77 1f       	adc	r23, r23
 5b0:	88 1f       	adc	r24, r24
 5b2:	bb 1f       	adc	r27, r27
 5b4:	26 17       	cp	r18, r22
 5b6:	37 07       	cpc	r19, r23
 5b8:	48 07       	cpc	r20, r24
 5ba:	ab 07       	cpc	r26, r27
 5bc:	b0 e8       	ldi	r27, 0x80	; 128
 5be:	09 f0       	breq	.+2      	; 0x5c2 <__divsf3_pse+0x56>
 5c0:	bb 0b       	sbc	r27, r27
 5c2:	80 2d       	mov	r24, r0
 5c4:	bf 01       	movw	r22, r30
 5c6:	ff 27       	eor	r31, r31
 5c8:	93 58       	subi	r25, 0x83	; 131
 5ca:	5f 4f       	sbci	r21, 0xFF	; 255
 5cc:	3a f0       	brmi	.+14     	; 0x5dc <__divsf3_pse+0x70>
 5ce:	9e 3f       	cpi	r25, 0xFE	; 254
 5d0:	51 05       	cpc	r21, r1
 5d2:	78 f0       	brcs	.+30     	; 0x5f2 <__divsf3_pse+0x86>
 5d4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__fp_inf>
 5d8:	0c 94 c8 03 	jmp	0x790	; 0x790 <__fp_szero>
 5dc:	5f 3f       	cpi	r21, 0xFF	; 255
 5de:	e4 f3       	brlt	.-8      	; 0x5d8 <__divsf3_pse+0x6c>
 5e0:	98 3e       	cpi	r25, 0xE8	; 232
 5e2:	d4 f3       	brlt	.-12     	; 0x5d8 <__divsf3_pse+0x6c>
 5e4:	86 95       	lsr	r24
 5e6:	77 95       	ror	r23
 5e8:	67 95       	ror	r22
 5ea:	b7 95       	ror	r27
 5ec:	f7 95       	ror	r31
 5ee:	9f 5f       	subi	r25, 0xFF	; 255
 5f0:	c9 f7       	brne	.-14     	; 0x5e4 <__divsf3_pse+0x78>
 5f2:	88 0f       	add	r24, r24
 5f4:	91 1d       	adc	r25, r1
 5f6:	96 95       	lsr	r25
 5f8:	87 95       	ror	r24
 5fa:	97 f9       	bld	r25, 7
 5fc:	08 95       	ret
 5fe:	e1 e0       	ldi	r30, 0x01	; 1
 600:	66 0f       	add	r22, r22
 602:	77 1f       	adc	r23, r23
 604:	88 1f       	adc	r24, r24
 606:	bb 1f       	adc	r27, r27
 608:	62 17       	cp	r22, r18
 60a:	73 07       	cpc	r23, r19
 60c:	84 07       	cpc	r24, r20
 60e:	ba 07       	cpc	r27, r26
 610:	20 f0       	brcs	.+8      	; 0x61a <__divsf3_pse+0xae>
 612:	62 1b       	sub	r22, r18
 614:	73 0b       	sbc	r23, r19
 616:	84 0b       	sbc	r24, r20
 618:	ba 0b       	sbc	r27, r26
 61a:	ee 1f       	adc	r30, r30
 61c:	88 f7       	brcc	.-30     	; 0x600 <__divsf3_pse+0x94>
 61e:	e0 95       	com	r30
 620:	08 95       	ret

00000622 <__fixunssfsi>:
 622:	0e 94 ad 03 	call	0x75a	; 0x75a <__fp_splitA>
 626:	88 f0       	brcs	.+34     	; 0x64a <__fixunssfsi+0x28>
 628:	9f 57       	subi	r25, 0x7F	; 127
 62a:	98 f0       	brcs	.+38     	; 0x652 <__fixunssfsi+0x30>
 62c:	b9 2f       	mov	r27, r25
 62e:	99 27       	eor	r25, r25
 630:	b7 51       	subi	r27, 0x17	; 23
 632:	b0 f0       	brcs	.+44     	; 0x660 <__fixunssfsi+0x3e>
 634:	e1 f0       	breq	.+56     	; 0x66e <__fixunssfsi+0x4c>
 636:	66 0f       	add	r22, r22
 638:	77 1f       	adc	r23, r23
 63a:	88 1f       	adc	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	1a f0       	brmi	.+6      	; 0x646 <__fixunssfsi+0x24>
 640:	ba 95       	dec	r27
 642:	c9 f7       	brne	.-14     	; 0x636 <__fixunssfsi+0x14>
 644:	14 c0       	rjmp	.+40     	; 0x66e <__fixunssfsi+0x4c>
 646:	b1 30       	cpi	r27, 0x01	; 1
 648:	91 f0       	breq	.+36     	; 0x66e <__fixunssfsi+0x4c>
 64a:	0e 94 c7 03 	call	0x78e	; 0x78e <__fp_zero>
 64e:	b1 e0       	ldi	r27, 0x01	; 1
 650:	08 95       	ret
 652:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__fp_zero>
 656:	67 2f       	mov	r22, r23
 658:	78 2f       	mov	r23, r24
 65a:	88 27       	eor	r24, r24
 65c:	b8 5f       	subi	r27, 0xF8	; 248
 65e:	39 f0       	breq	.+14     	; 0x66e <__fixunssfsi+0x4c>
 660:	b9 3f       	cpi	r27, 0xF9	; 249
 662:	cc f3       	brlt	.-14     	; 0x656 <__fixunssfsi+0x34>
 664:	86 95       	lsr	r24
 666:	77 95       	ror	r23
 668:	67 95       	ror	r22
 66a:	b3 95       	inc	r27
 66c:	d9 f7       	brne	.-10     	; 0x664 <__fixunssfsi+0x42>
 66e:	3e f4       	brtc	.+14     	; 0x67e <__fixunssfsi+0x5c>
 670:	90 95       	com	r25
 672:	80 95       	com	r24
 674:	70 95       	com	r23
 676:	61 95       	neg	r22
 678:	7f 4f       	sbci	r23, 0xFF	; 255
 67a:	8f 4f       	sbci	r24, 0xFF	; 255
 67c:	9f 4f       	sbci	r25, 0xFF	; 255
 67e:	08 95       	ret

00000680 <__floatunsisf>:
 680:	e8 94       	clt
 682:	09 c0       	rjmp	.+18     	; 0x696 <__floatsisf+0x12>

00000684 <__floatsisf>:
 684:	97 fb       	bst	r25, 7
 686:	3e f4       	brtc	.+14     	; 0x696 <__floatsisf+0x12>
 688:	90 95       	com	r25
 68a:	80 95       	com	r24
 68c:	70 95       	com	r23
 68e:	61 95       	neg	r22
 690:	7f 4f       	sbci	r23, 0xFF	; 255
 692:	8f 4f       	sbci	r24, 0xFF	; 255
 694:	9f 4f       	sbci	r25, 0xFF	; 255
 696:	99 23       	and	r25, r25
 698:	a9 f0       	breq	.+42     	; 0x6c4 <__floatsisf+0x40>
 69a:	f9 2f       	mov	r31, r25
 69c:	96 e9       	ldi	r25, 0x96	; 150
 69e:	bb 27       	eor	r27, r27
 6a0:	93 95       	inc	r25
 6a2:	f6 95       	lsr	r31
 6a4:	87 95       	ror	r24
 6a6:	77 95       	ror	r23
 6a8:	67 95       	ror	r22
 6aa:	b7 95       	ror	r27
 6ac:	f1 11       	cpse	r31, r1
 6ae:	f8 cf       	rjmp	.-16     	; 0x6a0 <__floatsisf+0x1c>
 6b0:	fa f4       	brpl	.+62     	; 0x6f0 <__floatsisf+0x6c>
 6b2:	bb 0f       	add	r27, r27
 6b4:	11 f4       	brne	.+4      	; 0x6ba <__floatsisf+0x36>
 6b6:	60 ff       	sbrs	r22, 0
 6b8:	1b c0       	rjmp	.+54     	; 0x6f0 <__floatsisf+0x6c>
 6ba:	6f 5f       	subi	r22, 0xFF	; 255
 6bc:	7f 4f       	sbci	r23, 0xFF	; 255
 6be:	8f 4f       	sbci	r24, 0xFF	; 255
 6c0:	9f 4f       	sbci	r25, 0xFF	; 255
 6c2:	16 c0       	rjmp	.+44     	; 0x6f0 <__floatsisf+0x6c>
 6c4:	88 23       	and	r24, r24
 6c6:	11 f0       	breq	.+4      	; 0x6cc <__floatsisf+0x48>
 6c8:	96 e9       	ldi	r25, 0x96	; 150
 6ca:	11 c0       	rjmp	.+34     	; 0x6ee <__floatsisf+0x6a>
 6cc:	77 23       	and	r23, r23
 6ce:	21 f0       	breq	.+8      	; 0x6d8 <__floatsisf+0x54>
 6d0:	9e e8       	ldi	r25, 0x8E	; 142
 6d2:	87 2f       	mov	r24, r23
 6d4:	76 2f       	mov	r23, r22
 6d6:	05 c0       	rjmp	.+10     	; 0x6e2 <__floatsisf+0x5e>
 6d8:	66 23       	and	r22, r22
 6da:	71 f0       	breq	.+28     	; 0x6f8 <__floatsisf+0x74>
 6dc:	96 e8       	ldi	r25, 0x86	; 134
 6de:	86 2f       	mov	r24, r22
 6e0:	70 e0       	ldi	r23, 0x00	; 0
 6e2:	60 e0       	ldi	r22, 0x00	; 0
 6e4:	2a f0       	brmi	.+10     	; 0x6f0 <__floatsisf+0x6c>
 6e6:	9a 95       	dec	r25
 6e8:	66 0f       	add	r22, r22
 6ea:	77 1f       	adc	r23, r23
 6ec:	88 1f       	adc	r24, r24
 6ee:	da f7       	brpl	.-10     	; 0x6e6 <__floatsisf+0x62>
 6f0:	88 0f       	add	r24, r24
 6f2:	96 95       	lsr	r25
 6f4:	87 95       	ror	r24
 6f6:	97 f9       	bld	r25, 7
 6f8:	08 95       	ret

000006fa <__fp_inf>:
 6fa:	97 f9       	bld	r25, 7
 6fc:	9f 67       	ori	r25, 0x7F	; 127
 6fe:	80 e8       	ldi	r24, 0x80	; 128
 700:	70 e0       	ldi	r23, 0x00	; 0
 702:	60 e0       	ldi	r22, 0x00	; 0
 704:	08 95       	ret

00000706 <__fp_nan>:
 706:	9f ef       	ldi	r25, 0xFF	; 255
 708:	80 ec       	ldi	r24, 0xC0	; 192
 70a:	08 95       	ret

0000070c <__fp_pscA>:
 70c:	00 24       	eor	r0, r0
 70e:	0a 94       	dec	r0
 710:	16 16       	cp	r1, r22
 712:	17 06       	cpc	r1, r23
 714:	18 06       	cpc	r1, r24
 716:	09 06       	cpc	r0, r25
 718:	08 95       	ret

0000071a <__fp_pscB>:
 71a:	00 24       	eor	r0, r0
 71c:	0a 94       	dec	r0
 71e:	12 16       	cp	r1, r18
 720:	13 06       	cpc	r1, r19
 722:	14 06       	cpc	r1, r20
 724:	05 06       	cpc	r0, r21
 726:	08 95       	ret

00000728 <__fp_round>:
 728:	09 2e       	mov	r0, r25
 72a:	03 94       	inc	r0
 72c:	00 0c       	add	r0, r0
 72e:	11 f4       	brne	.+4      	; 0x734 <__fp_round+0xc>
 730:	88 23       	and	r24, r24
 732:	52 f0       	brmi	.+20     	; 0x748 <__fp_round+0x20>
 734:	bb 0f       	add	r27, r27
 736:	40 f4       	brcc	.+16     	; 0x748 <__fp_round+0x20>
 738:	bf 2b       	or	r27, r31
 73a:	11 f4       	brne	.+4      	; 0x740 <__fp_round+0x18>
 73c:	60 ff       	sbrs	r22, 0
 73e:	04 c0       	rjmp	.+8      	; 0x748 <__fp_round+0x20>
 740:	6f 5f       	subi	r22, 0xFF	; 255
 742:	7f 4f       	sbci	r23, 0xFF	; 255
 744:	8f 4f       	sbci	r24, 0xFF	; 255
 746:	9f 4f       	sbci	r25, 0xFF	; 255
 748:	08 95       	ret

0000074a <__fp_split3>:
 74a:	57 fd       	sbrc	r21, 7
 74c:	90 58       	subi	r25, 0x80	; 128
 74e:	44 0f       	add	r20, r20
 750:	55 1f       	adc	r21, r21
 752:	59 f0       	breq	.+22     	; 0x76a <__fp_splitA+0x10>
 754:	5f 3f       	cpi	r21, 0xFF	; 255
 756:	71 f0       	breq	.+28     	; 0x774 <__fp_splitA+0x1a>
 758:	47 95       	ror	r20

0000075a <__fp_splitA>:
 75a:	88 0f       	add	r24, r24
 75c:	97 fb       	bst	r25, 7
 75e:	99 1f       	adc	r25, r25
 760:	61 f0       	breq	.+24     	; 0x77a <__fp_splitA+0x20>
 762:	9f 3f       	cpi	r25, 0xFF	; 255
 764:	79 f0       	breq	.+30     	; 0x784 <__fp_splitA+0x2a>
 766:	87 95       	ror	r24
 768:	08 95       	ret
 76a:	12 16       	cp	r1, r18
 76c:	13 06       	cpc	r1, r19
 76e:	14 06       	cpc	r1, r20
 770:	55 1f       	adc	r21, r21
 772:	f2 cf       	rjmp	.-28     	; 0x758 <__fp_split3+0xe>
 774:	46 95       	lsr	r20
 776:	f1 df       	rcall	.-30     	; 0x75a <__fp_splitA>
 778:	08 c0       	rjmp	.+16     	; 0x78a <__fp_splitA+0x30>
 77a:	16 16       	cp	r1, r22
 77c:	17 06       	cpc	r1, r23
 77e:	18 06       	cpc	r1, r24
 780:	99 1f       	adc	r25, r25
 782:	f1 cf       	rjmp	.-30     	; 0x766 <__fp_splitA+0xc>
 784:	86 95       	lsr	r24
 786:	71 05       	cpc	r23, r1
 788:	61 05       	cpc	r22, r1
 78a:	08 94       	sec
 78c:	08 95       	ret

0000078e <__fp_zero>:
 78e:	e8 94       	clt

00000790 <__fp_szero>:
 790:	bb 27       	eor	r27, r27
 792:	66 27       	eor	r22, r22
 794:	77 27       	eor	r23, r23
 796:	cb 01       	movw	r24, r22
 798:	97 f9       	bld	r25, 7
 79a:	08 95       	ret

0000079c <atoi>:
 79c:	fc 01       	movw	r30, r24
 79e:	88 27       	eor	r24, r24
 7a0:	99 27       	eor	r25, r25
 7a2:	e8 94       	clt
 7a4:	21 91       	ld	r18, Z+
 7a6:	20 32       	cpi	r18, 0x20	; 32
 7a8:	e9 f3       	breq	.-6      	; 0x7a4 <atoi+0x8>
 7aa:	29 30       	cpi	r18, 0x09	; 9
 7ac:	10 f0       	brcs	.+4      	; 0x7b2 <atoi+0x16>
 7ae:	2e 30       	cpi	r18, 0x0E	; 14
 7b0:	c8 f3       	brcs	.-14     	; 0x7a4 <atoi+0x8>
 7b2:	2b 32       	cpi	r18, 0x2B	; 43
 7b4:	41 f0       	breq	.+16     	; 0x7c6 <atoi+0x2a>
 7b6:	2d 32       	cpi	r18, 0x2D	; 45
 7b8:	39 f4       	brne	.+14     	; 0x7c8 <atoi+0x2c>
 7ba:	68 94       	set
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <atoi+0x2a>
 7be:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__mulhi_const_10>
 7c2:	82 0f       	add	r24, r18
 7c4:	91 1d       	adc	r25, r1
 7c6:	21 91       	ld	r18, Z+
 7c8:	20 53       	subi	r18, 0x30	; 48
 7ca:	2a 30       	cpi	r18, 0x0A	; 10
 7cc:	c0 f3       	brcs	.-16     	; 0x7be <atoi+0x22>
 7ce:	1e f4       	brtc	.+6      	; 0x7d6 <atoi+0x3a>
 7d0:	90 95       	com	r25
 7d2:	81 95       	neg	r24
 7d4:	9f 4f       	sbci	r25, 0xFF	; 255
 7d6:	08 95       	ret

000007d8 <strcmp>:
 7d8:	fb 01       	movw	r30, r22
 7da:	dc 01       	movw	r26, r24
 7dc:	8d 91       	ld	r24, X+
 7de:	01 90       	ld	r0, Z+
 7e0:	80 19       	sub	r24, r0
 7e2:	01 10       	cpse	r0, r1
 7e4:	d9 f3       	breq	.-10     	; 0x7dc <strcmp+0x4>
 7e6:	99 0b       	sbc	r25, r25
 7e8:	08 95       	ret

000007ea <strcpy>:
 7ea:	fb 01       	movw	r30, r22
 7ec:	dc 01       	movw	r26, r24
 7ee:	01 90       	ld	r0, Z+
 7f0:	0d 92       	st	X+, r0
 7f2:	00 20       	and	r0, r0
 7f4:	e1 f7       	brne	.-8      	; 0x7ee <strcpy+0x4>
 7f6:	08 95       	ret

000007f8 <__mulhi_const_10>:
 7f8:	7a e0       	ldi	r23, 0x0A	; 10
 7fa:	97 9f       	mul	r25, r23
 7fc:	90 2d       	mov	r25, r0
 7fe:	87 9f       	mul	r24, r23
 800:	80 2d       	mov	r24, r0
 802:	91 0d       	add	r25, r1
 804:	11 24       	eor	r1, r1
 806:	08 95       	ret

00000808 <_exit>:
 808:	f8 94       	cli

0000080a <__stop_program>:
 80a:	ff cf       	rjmp	.-2      	; 0x80a <__stop_program>
